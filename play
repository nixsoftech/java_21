---
- name: Offline Ubuntu LTS Upgrade 18.04 -> 20.04 -> 22.04
  hosts: all
  become: yes
  vars:
    focal_log: /tmp/focal.log
    jammy_log: /tmp/jammy.log
    reboot_wait_timeout: 3600
    script_execution_timeout: 14400
    focal_script: /tmp/focal.sh
    jammy_script: /tmp/jammy.sh
    # Enhanced SSH settings
    ansible_ssh_common_args: "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=15 -o ServerAliveCountMax=10 -o TCPKeepAlive=yes"
    # Set Python interpreter explicitly
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Detect current Ubuntu version
      command: lsb_release -cs
      register: current_release
      changed_when: false

    - name: Show current release
      debug:
        msg: "Current release: {{ current_release.stdout }}"

    - name: Copy focal.sh to /tmp
      copy:
        src: focal.sh
        dest: "{{ focal_script }}"
        mode: '0755'

    - name: Copy jammy.sh to /tmp
      copy:
        src: jammy.sh
        dest: "{{ jammy_script }}"
        mode: '0755'

    # -------------------------------
    # Upgrade 18.04 -> 20.04 (focal)
    # -------------------------------
    - block:
        - name: Run focal.sh if OS is 18.04
          shell: "nohup bash {{ focal_script }} > {{ focal_log }} 2>&1 & echo $! > /tmp/focal.pid"
          args:
            executable: /bin/bash
          async: 0
          poll: 0
          register: focal_start

        - name: Wait briefly for script to start
          pause:
            seconds: 5

        - name: Monitor upgrade progress with immediate completion
          shell: |
            # Check if upgrade process completed
            if ! ps -p $(cat /tmp/focal.pid 2>/dev/null || echo 0) > /dev/null 2>&1; then
              # Process finished, check final status
              if grep -q "UPGRADE_COMPLETE" {{ focal_log }} 2>/dev/null; then
                echo "UPGRADE_COMPLETED_SUCCESSFULLY"
                exit 0
              else
                echo "UPGRADE_FAILED - Process ended without completion marker"
                exit 2
              fi
            else
              # Process still running, check if it recently completed
              if tail -n 5 {{ focal_log }} 2>/dev/null | grep -q "UPGRADE_COMPLETE"; then
                echo "UPGRADE_COMPLETED_SUCCESSFULLY"
                exit 0
              else
                echo "UPGRADE_STILL_RUNNING"
                exit 1
              fi
            fi
          register: upgrade_check
          failed_when: upgrade_check.rc == 2
          changed_when: false
          retries: 180
          delay: 5
          until: upgrade_check.rc == 0
          ignore_errors: yes

        - name: Display final upgrade status
          debug:
            msg: "Focal upgrade: {{ upgrade_check.stdout | default('UNKNOWN') }}"

        - name: Verify SSH is stable before reboot
          wait_for_connection:
            connect_timeout: 30
            sleep: 5
            delay: 5
            timeout: 300

        - name: Force wait before reboot
          pause:
            seconds: 30

        - name: Reboot after focal upgrade
          reboot:
            reboot_timeout: "{{ reboot_wait_timeout }}"
            connect_timeout: 30
            pre_reboot_delay: 10
            post_reboot_delay: 30
            test_command: whoami

        - name: Wait for system to stabilize after reboot
          wait_for_connection:
            connect_timeout: 30
            sleep: 15
            delay: 30
            timeout: "{{ reboot_wait_timeout }}"

        - name: Detect Ubuntu version after focal upgrade
          raw: lsb_release -cs
          register: release_after_focal
          changed_when: false

        - name: Show release after focal upgrade
          debug:
            msg: "Release after focal upgrade: {{ release_after_focal.stdout | default('UNKNOWN') }}"

      when: current_release.stdout == "bionic"
      rescue:
        - name: Handle focal upgrade failures
          debug:
            msg: "Focal upgrade may have issues. Check {{ focal_log }} on the target system. Continuing anyway..."

    # -------------------------------
    # Upgrade 20.04 -> 22.04 (jammy)
    # -------------------------------
    - block:
        - name: Run jammy.sh if OS is 20.04
          shell: "nohup bash {{ jammy_script }} > {{ jammy_log }} 2>&1 & echo $! > /tmp/jammy.pid"
          args:
            executable: /bin/bash
          async: 0
          poll: 0
          register: jammy_start

        - name: Wait briefly for script to start
          pause:
            seconds: 5

        - name: Monitor jammy upgrade progress with immediate completion
          shell: |
            # Check if upgrade process completed
            if ! ps -p $(cat /tmp/jammy.pid 2>/dev/null || echo 0) > /dev/null 2>&1; then
              # Process finished, check final status
              if grep -q "UPGRADE_COMPLETE" {{ jammy_log }} 2>/dev/null; then
                echo "UPGRADE_COMPLETED_SUCCESSFULLY"
                exit 0
              else
                echo "UPGRADE_FAILED - Process ended without completion marker"
                exit 2
              fi
            else
              # Process still running, check if it recently completed
              if tail -n 5 {{ jammy_log }} 2>/dev/null | grep -q "UPGRADE_COMPLETE"; then
                echo "UPGRADE_COMPLETED_SUCCESSFULLY"
                exit 0
              else
                echo "UPGRADE_STILL_RUNNING"
                exit 1
              fi
            fi
          register: upgrade_check
          failed_when: upgrade_check.rc == 2
          changed_when: false
          retries: 180
          delay: 5
          until: upgrade_check.rc == 0
          ignore_errors: yes

        - name: Display final jammy upgrade status
          debug:
            msg: "Jammy upgrade: {{ upgrade_check.stdout | default('UNKNOWN') }}"

        - name: Verify SSH is stable before jammy reboot
          wait_for_connection:
            connect_timeout: 30
            sleep: 5
            delay: 5
            timeout: 300

        - name: Force wait before jammy reboot
          pause:
            seconds: 30

        - name: Reboot after jammy upgrade
          reboot:
            reboot_timeout: "{{ reboot_wait_timeout }}"
            connect_timeout: 30
            pre_reboot_delay: 10
            post_reboot_delay: 30
            test_command: whoami

        - name: Wait for system to stabilize after final reboot
          wait_for_connection:
            connect_timeout: 30
            sleep: 15
            delay: 30
            timeout: "{{ reboot_wait_timeout }}"

      when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"
      rescue:
        - name: Handle jammy upgrade failures
          debug:
            msg: "Jammy upgrade may have issues. Check {{ jammy_log }} on the target system."

    # -------------------------------
    # Final OS check
    # -------------------------------
    - name: Detect Ubuntu version after upgrades
      raw: lsb_release -cs
      register: final_release
      changed_when: false

    - name: Show final release
      debug:
        msg: "Final Ubuntu release: {{ final_release.stdout | default('UNKNOWN') }}"

    - name: Display upgrade summary
      debug:
        msg: |
          Upgrade process completed!
          Initial release: {{ current_release.stdout }}
          Final release: {{ final_release.stdout | default('UNKNOWN') }}
