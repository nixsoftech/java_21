import time
import logging
from pywinauto.application import Application
from pywinauto.timings import TimeoutError

# ---------- Logging Setup ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("automation_log.txt", mode="w", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# Paths & credentials
app_path = r"D:\Program Files (x86)\NCCL Ltd\RMSSetup\RMS FE.exe"
username = "QA1"
password = "change@1212"


def wait_for_window(app, title_re, timeout=20):
    """Wait for a window with regex title and return it."""
    for _ in range(timeout):
        try:
            win = app.window(title_re=title_re)
            if win.exists() and win.is_visible():
                return win
        except Exception:
            pass
        time.sleep(1)
    raise TimeoutError(f"Window '{title_re}' not found in {timeout}s")


def wait_for_control(parent, **criteria):
    """Wait for a control under a window/dialog."""
    for _ in range(20):
        try:
            ctrl = parent.child_window(**criteria)
            if ctrl.exists() and ctrl.is_visible():
                return ctrl
        except Exception:
            pass
        time.sleep(1)
    raise TimeoutError(f"Control {criteria} not found in time")


def main():
    logging.info("üöÄ Launching RMS...")
    app = Application(backend="uia").start(app_path)

    # ===== Login window =====
    dlg = wait_for_window(app, ".*Risk Management System - Login.*", timeout=30)
    logging.info("‚úÖ Login window detected")

    user_edit = wait_for_control(dlg, auto_id="txtUser", control_type="Edit")
    pass_edit = wait_for_control(dlg, auto_id="txtPassword", control_type="Edit")
    submit_btn = wait_for_control(dlg, title="Submit", control_type="Button")

    user_edit.type_keys(username, with_spaces=True)
    pass_edit.type_keys(password, with_spaces=True)
    submit_btn.click_input()
    logging.info("üîë Submitted login form...")

    # ===== Handle Test/Mock popup =====
    try:
        popup = wait_for_window(app, ".*Do you want to login to test/mock environment.*", timeout=10)
        yes_btn = wait_for_control(popup, title="Yes", control_type="Button")
        yes_btn.click_input()
        logging.info("‚úÖ Clicked 'Yes' on Test/Mock popup")
    except TimeoutError:
        logging.info("‚ÑπÔ∏è No Test/Mock popup detected")

    # ===== Main RMS window =====
    main_window = wait_for_window(app, ".*Risk Management System.*", timeout=40)
    logging.info("üéâ Logged in successfully!")

    # ===== Exit Application =====
    logging.info("üì§ Closing RMS...")
    try:
        main_window.menu_select("Exit")
        exit_popup = wait_for_window(app, ".*Do you want to close the RMS.*", timeout=15)
        yes_exit = wait_for_control(exit_popup, title="Yes", control_type="Button")
        yes_exit.click_input()
        logging.info("‚úÖ RMS closed successfully")
    except Exception as e:
        logging.error(f"‚ùå Error closing RMS: {e}")


if __name__ == "__main__":
    main()
