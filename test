import time
import logging
from pywinauto.application import Application
from pywinauto.timings import TimeoutError

# ---------------- Logging Setup ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# ---------------- Helper Function ----------------
def safe_type(window, auto_id, control_type, text, retries=5, delay=2):
    """Retry typing text into a control until success or retries exhausted."""
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).type_keys(text, with_spaces=True)
            logger.info(f"Typed '{text}' into {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to type into {auto_id} after {retries} attempts")

def safe_select(window, auto_id, control_type, value, retries=5, delay=2):
    """Retry selecting a value in a ComboBox until success or retries exhausted."""
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).select(value)
            logger.info(f"Selected '{value}' in {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to select {value} in {auto_id} after {retries} attempts")

# ---------------- Main Script ----------------
try:
    logger.info("Starting RMS Application...")
    app = Application(backend="uia").start(
        r"D:\Program Files (x86)\NCCL Ltd\RMSSetup\RMS FE.exe"
    )

    # Wait for Login window
    dlg = app.window(title_re=".*Risk Management System - Login")
    dlg.wait("visible", timeout=30)
    logger.info("Login window found.")

    # Fill login fields with retries
    safe_type(dlg, "txt_UserId", "Edit", "QA1")
    safe_type(dlg, "txt_Password", "Edit", "change@1212")
    safe_select(dlg, "cmb_Envionrnment", "ComboBox", "PROD")
    safe_select(dlg, "cmb_loginMethod", "ComboBox", "RMS")

    # Click Submit
    dlg.child_window(auto_id="btn_Submit", control_type="Button").wait("enabled", timeout=10).click_input()
    logger.info("Clicked Submit.")

    # Handle login popup (Yes/No)
    try:
        popup = app.window(title_re=".*")
        popup.wait("visible", timeout=10)
        yes_btn = popup.child_window(title="Yes", control_type="Button")
        yes_btn.wait("enabled", timeout=5).click_input()
        logger.info("Clicked Yes on environment popup.")
    except TimeoutError:
        logger.warning("No popup appeared after login.")

    # Wait for Main Window
    main_win = app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*")
    main_win.wait("visible", timeout=40)
    logger.info("Main RMS window is loaded ✅")

    # -------- EXIT FLOW --------
    # Click Exit menu item
    exit_menu = main_win.child_window(title="Exit", control_type="MenuItem")
    exit_menu.wait("enabled", timeout=15).click_input()
    logger.info("Clicked Exit menu item.")

    # Handle Exit confirmation popup
    try:
        exit_popup = app.window(title_re=".*")
        exit_popup.wait("visible", timeout=10)
        yes_exit_btn = exit_popup.child_window(title="Yes", control_type="Button")
        yes_exit_btn.wait("enabled", timeout=5).click_input()
        logger.info("Clicked Yes on Exit confirmation popup ✅")
    except TimeoutError:
        logger.warning("No exit confirmation popup appeared.")

    logger.info("Automation script completed successfully.")

except Exception as e:
    logger.exception(f"Automation failed: {e}")
