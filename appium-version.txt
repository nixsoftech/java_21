def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=30, poll_interval=1):
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)
    end_time = time.time() + max_wait_seconds

    while time.time() < end_time:
        rows = dump_peak_margin_complete(peak_margin_win)
        for r_idx, (row_cells, row_values) in enumerate(rows):
            if not row_values:
                continue

            # Find Start Time dynamically
            try:
                start_idx = next(i for i, v in enumerate(row_values) if v.strip() == target_start_time)
            except StopIteration:
                continue

            # Find Status dynamically (PENDING or NORMAL)
            try:
                status_idx = next(i for i, v in enumerate(row_values) if v.strip().upper() in ["PENDING", "NORMAL"])
            except StopIteration:
                continue

            status_val = row_values[status_idx].strip().upper()
            if status_val == "PENDING":
                logger.info(f"âœ… Matched row {r_idx} with Start Time={target_start_time}, Status={status_val}")

                # Click checkbox (last column, usually)
                try:
                    row_cells[-1].click_input()
                    time.sleep(0.3)
                except Exception as e:
                    logger.warning(f"Failed to click checkbox: {e}")

                # Change Status to REJECT
                status_cell = row_cells[status_idx]
                status_cell.click_input()
                time.sleep(0.3)
                send_keys("{F2}")
                time.sleep(0.2)
                send_keys("REJECT{ENTER}")
                time.sleep(0.3)

                # Save
                safe_click(peak_margin_win, title="Save", control_type="Button")
                time.sleep(1.5)

                # Handle confirmation popup
                try:
                    popup = app.window(best_match="Risk Management System")
                    popup.wait("visible", timeout=8)
                    safe_click(popup, auto_id="2", control_type="Button")
                except Exception:
                    pass

                return  # Done

        time.sleep(poll_interval)

    raise RuntimeError(f"No row found with Start Time={target_start_time} & Status=PENDING within {max_wait_seconds}s")
