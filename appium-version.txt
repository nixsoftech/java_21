---
- name: Offline Ubuntu LTS upgrade 18.04 -> 20.04 -> 22.04
  hosts: all
  become: true
  vars:
    reboot_wait_timeout: 3600   # 60 minutes
    log_dir: "{{ playbook_dir }}/upgrade-logs/{{ inventory_hostname }}"
    etc_backup: "/etc_bkp_{{ ansible_date_time.iso8601 }}"

  tasks:
    - name: Ensure log directory exists on control node
      delegate_to: localhost
      file:
        path: "{{ log_dir }}"
        state: directory
        mode: '0755'

    - name: Check if focal.sh exists on control node
      delegate_to: localhost
      stat:
        path: "{{ playbook_dir }}/focal.sh"
      register: focal_script_local
      run_once: true

    - name: Fail if focal.sh is missing
      delegate_to: localhost
      fail:
        msg: "focal.sh not found in playbook directory"
      when: not focal_script_local.stat.exists
      run_once: true

    - name: Check if jammy.sh exists on control node
      delegate_to: localhost
      stat:
        path: "{{ playbook_dir }}/jammy.sh"
      register: jammy_script_local
      run_once: true

    - name: Fail if jammy.sh is missing
      delegate_to: localhost
      fail:
        msg: "jammy.sh not found in playbook directory"
      when: not jammy_script_local.stat.exists
      run_once: true

    - name: Backup /etc directory
      command: "cp -a /etc {{ etc_backup }}"
      register: etc_backup_result

    - name: Show backup path
      debug:
        msg: "Backup of /etc completed at {{ etc_backup }}"

    - name: Copy focal.sh to /tmp/ on target
      copy:
        src: focal.sh
        dest: /tmp/focal.sh
        mode: '0755'

    - name: Copy jammy.sh to /tmp/ on target
      copy:
        src: jammy.sh
        dest: /tmp/jammy.sh
        mode: '0755'

    - name: Detect current Ubuntu version
      command: lsb_release -cs
      register: current_release
      changed_when: false

    - name: Show current release
      debug:
        msg: "Current release: {{ current_release.stdout }}"

    # -------------------------------
    # Run focal.sh if OS is 18.04
    # -------------------------------
    - name: Run focal.sh if OS is 18.04
      shell: "bash /tmp/focal.sh > /tmp/focal.log 2>&1"
      async: 7200
      poll: 10
      register: focal_result
      when: current_release.stdout == "bionic"

    - name: Check focal.sh execution status
      async_status:
        jid: "{{ focal_result.ansible_job_id }}"
      register: focal_async_result
      until: focal_async_result.finished
      retries: 720  # Retry for up to 7200 seconds (matches async duration)
      delay: 10
      when: focal_result.ansible_job_id is defined

    - name: Fail if focal.sh execution failed
      fail:
        msg: "focal.sh failed with return code {{ focal_async_result.rc }}. Check /tmp/focal.log for details."
      when: >
        focal_async_result.ansible_job_id is defined and
        focal_async_result.rc is defined and
        focal_async_result.rc != 0

    - name: Debug focal.sh result
      debug:
        msg: "focal.sh result: rc={{ focal_async_result.rc | default('unknown') }}, job_id={{ focal_async_result.ansible_job_id | default('unknown') }}"
      when: focal_result.ansible_job_id is defined

    - name: Fetch focal.sh log
      fetch:
        src: /tmp/focal.log
        dest: "{{ log_dir }}/focal.log"
        flat: yes
      when: focal_result.ansible_job_id is defined

    - name: Reboot after focal.sh
      reboot:
        reboot_timeout: "{{ reboot_wait_timeout }}"
      when: >
        focal_async_result.ansible_job_id is defined and
        focal_async_result.rc is defined and
        focal_async_result.rc == 0

    - name: Detect Ubuntu version after focal upgrade
      command: lsb_release -cs
      register: release_after_focal
      changed_when: false
      when: current_release.stdout == "bionic"

    - name: Show release after focal upgrade
      debug:
        msg: "Release after focal upgrade: {{ release_after_focal.stdout | default('not checked') }}"
      when: current_release.stdout == "bionic"

    # -------------------------------
    # Run jammy.sh if OS is 20.04
    # -------------------------------
    - name: Run jammy.sh if OS is 20.04
      shell: "bash /tmp/jammy.sh > /tmp/jammy.log 2>&1"
      async: 7200
      poll: 10
      register: jammy_result
      when: >
        current_release.stdout == "focal" or
        (release_after_focal is defined and release_after_focal.stdout == "focal")

    - name: Check jammy.sh execution status
      async_status:
        jid: "{{ jammy_result.ansible_job_id }}"
      register: jammy_async_result
      until: jammy_async_result.finished
      retries: 720  # Retry for up to 7200 seconds (matches async duration)
      delay: 10
      when: jammy_result.ansible_job_id is defined

    - name: Fail if jammy.sh execution failed
      fail:
        msg: "jammy.sh failed with return code {{ jammy_async_result.rc }}. Check /tmp/jammy.log for details."
      when: >
        jammy_async_result.ansible_job_id is defined and
        jammy_async_result.rc is defined and
        jammy_async_result.rc != 0

    - name: Debug jammy.sh result
      debug:
        msg: "jammy.sh result: rc={{ jammy_async_result.rc | default('unknown') }}, job_id={{ jammy_async_result.ansible_job_id | default('unknown') }}"
      when: jammy_result.ansible_job_id is defined

    - name: Fetch jammy.sh log
      fetch:
        src: /tmp/jammy.log
        dest: "{{ log_dir }}/jammy.log"
        flat: yes
      when: jammy_result.ansible_job_id is defined

    - name: Restart SSH after jammy.sh
      shell: systemctl restart ssh || systemctl restart sshd
      register: ssh_restart_result
      when: >
        jammy_async_result.ansible_job_id is defined and
        jammy_async_result.rc is defined and
        jammy_async_result.rc == 0

    - name: Reboot after jammy.sh
      reboot:
        reboot_timeout: "{{ reboot_wait_timeout }}"
      when: >
        jammy_async_result.ansible_job_id is defined and
        jammy_async_result.rc is defined and
        jammy_async_result.rc == 0

    - name: Detect Ubuntu version after jammy upgrade
      command: lsb_release -cs
      register: final_release
      changed_when: false

    - name: Show final release
      debug:
        msg: "Final Ubuntu release: {{ final_release.stdout }}"
