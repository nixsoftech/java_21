cat jammy.sh
#!/bin/bash
set -e

# Non-interactive flags
export DEBIAN_FRONTEND=noninteractive
export NEEDRESTART_MODE=a
export APT_LISTCHANGES_FRONTEND=none

echo "=== Step 1: Disable AppStream and Snap hooks ==="
[ -f /etc/apt/apt.conf.d/50appstream ] && mv /etc/apt/apt.conf.d/50appstream /etc/apt/apt.conf.d/50appstream.disabled
[ -f /etc/apt/apt.conf.d/20snapd.conf ] && mv /etc/apt/apt.conf.d/20snapd.conf /etc/apt/apt.conf.d/20snapd.conf.disabled

echo "=== Step 2: Hold snap-related packages ==="
apt-mark hold snapd firefox

echo "=== Step 3: Clean old package lists and cache ==="
rm -rf /var/lib/apt/lists/*
apt-get clean
apt-get autoclean

# ==================== SSH PROTECTION SECTION ====================
echo "=== Configuring SSH for resilient upgrade ==="

# Backup SSH config
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S)

# Function to ensure setting exists
ensure_ssh_setting() {
    local setting="$1"
    local value="$2"

    if grep -q "^$setting" /etc/ssh/sshd_config; then
        # Setting exists, update it
        sed -i "s/^$setting.*/$setting $value/" /etc/ssh/sshd_config
        echo "Updated $setting to $value"
    else
        # Setting doesn't exist, append it
        echo "$setting $value" >> /etc/ssh/sshd_config
        echo "Added $setting $value"
    fi
}

# Ensure SSH settings exist with our values
ensure_ssh_setting "ClientAliveInterval" "30"
ensure_ssh_setting "ClientAliveCountMax" "10"
ensure_ssh_setting "MaxSessions" "50"
ensure_ssh_setting "MaxStartups" "50"
ensure_ssh_setting "LoginGraceTime" "60"
ensure_ssh_setting "TCPKeepAlive" "yes"

# Special handling for PermitRootLogin - be careful with this one!
if ! grep -q "^PermitRootLogin" /etc/ssh/sshd_config; then
    echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
    echo "Added PermitRootLogin yes"
else
    # Update existing PermitRootLogin setting
    sed -i "s/^PermitRootLogin.*/PermitRootLogin yes/" /etc/ssh/sshd_config
    echo "Updated PermitRootLogin to yes"
fi

# Add our comment marker
if ! grep -q "Ansible Upgrade Protection" /etc/ssh/sshd_config; then
    echo "" >> /etc/ssh/sshd_config
    echo "# Ansible Upgrade Protection - Added by jammy.sh" >> /etc/ssh/sshd_config
    echo "Added Ansible Upgrade Protection comment marker"
fi

# Brief pause before reload to ensure stability
sleep 2

# Reload SSH config (NOT restart) to apply new settings
if systemctl reload ssh 2>/dev/null || systemctl reload sshd 2>/dev/null; then
    echo "SSH configuration reloaded successfully"
else
    echo "SSH reload failed, but existing connections remain active"
fi

# Brief pause after reload to let things settle
sleep 2

# Ensure SSH services are enabled to survive upgrades
systemctl enable ssh 2>/dev/null || true
systemctl enable sshd 2>/dev/null || true
echo "SSH services enabled"

echo "SSH protection configured successfully"

##############################

# ==================== PACKAGE FIX SECTION ====================
# Remove problematic packages that cause upgrade failures
echo "Removing problematic packages that may cause upgrade failures..."
dpkg --remove --force-remove-reinstreq memtest86+ || true
apt-get remove -y memtest86+ || true

##############################################
# Step 2: Upgrade 20.04 (focal) -> 22.04 (jammy)
##############################################
echo "=== Step 1: Writing jammy repositories ==="
cat > /etc/apt/sources.list <<EOF
# jammy repositories (amd64)
deb [arch=amd64] http://10.13.0.88:8080/ubuntu jammy main universe
deb [arch=amd64] http://10.13.0.88:8080/ubuntu jammy-updates main universe
deb [arch=amd64] http://10.13.0.88:8080/ubuntu jammy-security main universe

# jammy repositories (i386)
deb [arch=i386] http://10.13.0.90/ubuntu/ubuntu jammy main universe
deb [arch=i386] http://10.13.0.90/ubuntu/ubuntu jammy-updates main universe
deb [arch=i386] http://10.13.0.90/ubuntu/ubuntu jammy-security main universe

# restricted packages (amd64)
deb [arch=amd64] http://10.13.0.90/ubuntu/ubuntu jammy restricted
deb [arch=amd64] http://10.13.0.90/ubuntu/ubuntu jammy-updates restricted
deb [arch=amd64] http://10.13.0.90/ubuntu/ubuntu jammy-security restricted
EOF

echo "=== Step 2: Updating and upgrading to jammy ==="
apt-get update -o Acquire::Check-Valid-Until=false -yq || true

echo "=== Starting package upgrades ==="
apt-get upgrade -yq \
  -o Dpkg::Options::="--force-confdef" \
  -o Dpkg::Options::="--force-confold"

echo "=== Starting distribution upgrade ==="
apt-get dist-upgrade -yq \
  -o Dpkg::Options::="--force-confdef" \
  -o Dpkg::Options::="--force-confold"

echo "=== Cleaning up after upgrade ==="
apt-get autoremove -yq || true
apt-get autoclean -yq || true

# ==================== POST-UPGRADE SSH VERIFICATION ====================
echo "=== Verifying SSH service status ==="
if systemctl is-active ssh 2>/dev/null || systemctl is-active sshd 2>/dev/null; then
    echo "SSH service is active and running"
else
    echo "Warning: SSH service is not active"
    # Try to start SSH if it's not running
    systemctl start ssh 2>/dev/null || systemctl start sshd 2>/dev/null || true
    echo "Attempted to start SSH service"
fi

# Verify SSH connectivity
echo "=== Testing SSH connectivity ==="
if ssh-keyscan -H localhost 2>/dev/null | grep -q "ssh-"; then
    echo "SSH connectivity test passed"
else
    echo "SSH connectivity test failed, but continuing"
fi

# Final completion marker
echo "UPGRADE_COMPLETE"
echo "=== Jammy upgrade completed successfully ==="
