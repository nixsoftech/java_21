---
- name: Offline Ubuntu LTS upgrade 18.04 -> 20.04 -> 22.04
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    reboot_wait_timeout: 1800   # 30 minutes

  tasks:

    #################################################################
    # Setup & Backup
    #################################################################

    - name: Ensure log directory exists on control node
      delegate_to: localhost
      file:
        path: "./logs"
        state: directory

    - name: Backup /etc directory
      archive:
        path: /etc
        dest: "/etc_bkp_{{ ansible_date_time.iso8601 }}.tgz"
        format: gz

    - name: Show backup path
      debug:
        msg: "Backup of /etc completed at /etc_bkp_{{ ansible_date_time.iso8601 }}"

    - name: Copy focal.sh to /tmp/ on target
      copy:
        src: focal.sh
        dest: /tmp/focal.sh
        mode: '0755'

    - name: Copy jammy.sh to /tmp/ on target
      copy:
        src: jammy.sh
        dest: /tmp/jammy.sh
        mode: '0755'

    - name: Detect current Ubuntu version
      command: lsb_release -cs
      register: current_release
      changed_when: false

    - name: Show current release
      debug:
        msg: "Current release: {{ current_release.stdout }}"

    #################################################################
    # Upgrade 18.04 -> 20.04 (focal)
    #################################################################

    - name: Run focal.sh if OS is 18.04
      shell: "nohup bash /tmp/focal.sh > /tmp/focal.log 2>&1 &"
      async: 1
      poll: 0
      when: current_release.stdout == "bionic"

    - name: Monitor focal upgrade until completion
      block:
        - name: Check if focal.sh is still running
          shell: pgrep -f focal.sh
          register: focal_running
          ignore_errors: yes
          when: current_release.stdout == "bionic"

        - name: Wait for SSH to return (if reboot happened)
          wait_for_connection:
            delay: 30
            timeout: 120
          register: ssh_status
          ignore_errors: yes
          when: current_release.stdout == "bionic"

        - name: Decide if focal upgrade is done
          set_fact:
            focal_done: "{{ (focal_running.rc != 0) and (ssh_status is defined and ssh_status is succeeded) }}"
          when: current_release.stdout == "bionic"
      retries: 120
      delay: 60
      until: focal_done | default(false)
      when: current_release.stdout == "bionic"

    - name: Reboot the server after focal upgrade
      reboot:
        reboot_timeout: "{{ reboot_wait_timeout }}"
        pre_reboot_delay: 10
        post_reboot_delay: 30
      when: current_release.stdout == "bionic"

    - name: Wait for SSH after focal reboot
      wait_for_connection:
        delay: 10
        timeout: "{{ reboot_wait_timeout }}"
      when: current_release.stdout == "bionic"

    - name: Verify OS version after focal upgrade
      command: lsb_release -cs
      register: release_after_focal
      changed_when: false
      when: current_release.stdout == "bionic"

    - name: Show release after focal upgrade
      debug:
        msg: "Release after focal upgrade: {{ release_after_focal.stdout }}"
      when: current_release.stdout == "bionic"

    #################################################################
    # Upgrade 20.04 -> 22.04 (jammy)
    #################################################################

    - name: Run jammy.sh if OS is 20.04
      shell: "nohup bash /tmp/jammy.sh > /tmp/jammy.log 2>&1 &"
      async: 1
      poll: 0
      when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"

    - name: Monitor jammy upgrade until completion
      block:
        - name: Check if jammy.sh is still running
          shell: pgrep -f jammy.sh
          register: jammy_running
          ignore_errors: yes
          when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"

        - name: Wait for SSH to return (if reboot happened)
          wait_for_connection:
            delay: 30
            timeout: 120
          register: ssh_status
          ignore_errors: yes
          when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"

        - name: Decide if jammy upgrade is done
          set_fact:
            jammy_done: "{{ (jammy_running.rc != 0) and (ssh_status is defined and ssh_status is succeeded) }}"
          when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"
      retries: 120
      delay: 60
      until: jammy_done | default(false)
      when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"

    - name: Reboot the server after jammy upgrade
      reboot:
        reboot_timeout: "{{ reboot_wait_timeout }}"
        pre_reboot_delay: 10
        post_reboot_delay: 30
      when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"

    - name: Wait for SSH after jammy reboot
      wait_for_connection:
        delay: 10
        timeout: "{{ reboot_wait_timeout }}"
      when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"

    - name: Verify OS version after jammy upgrade
      command: lsb_release -cs
      register: release_after_jammy
      changed_when: false
      when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"

    - name: Show release after jammy upgrade
      debug:
        msg: "Release after jammy upgrade: {{ release_after_jammy.stdout }}"
      when: (release_after_focal.stdout | default('')) == "focal" or current_release.stdout == "focal"
