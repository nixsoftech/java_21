def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=20, poll_interval=1):
    logger.info(f"Looking for Peak Margin panel for rash1 to reject Start Time={target_start_time}...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    end_time = time.time() + max_wait_seconds

    while time.time() < end_time:
        rows = dump_peak_margin_grid(peak_margin_win)

        for r_idx, (row_cells, row_values) in enumerate(rows):
            if len(row_values) < 6:
                continue

            start_time_val = row_values[1]
            status_val = row_values[5]

            if start_time_val == target_start_time and status_val.upper() == "PENDING":
                logger.info(f"‚úÖ Found row {r_idx}: Start={start_time_val}, Status={status_val}")

                # Step 1: Select checkbox
                checkbox_cell = row_cells[-1]
                checkbox_cell.click_input()
                logger.info("‚òëÔ∏è Checkbox selected.")
                time.sleep(1)  # Allow grid refresh

                # üîÑ Step 1.5: Re-read grid to get fresh handles
                rows_after_click = dump_peak_margin_grid(peak_margin_win)
                if r_idx >= len(rows_after_click):
                    logger.error("Grid changed after checkbox selection, row index out of range!")
                    continue  # Retry loop

                row_cells_after = rows_after_click[r_idx]
                pending_cell = row_cells_after[5]

                logger.info(f"üñ±Ô∏è About to double-click fresh PENDING cell: "
                            f"Value={pending_cell.legacy_properties().get('Value','')}")
                pending_cell.double_click_input()
                logger.info("üñ±Ô∏è Double-clicked on PENDING cell to open dropdown.")
                time.sleep(0.5)

                # Step 3: Wait for Editing Control to appear
                try:
                    editing_ctrl = peak_margin_win.child_window(control_type="ComboBox", found_index=0)
                    editing_ctrl.wait("ready", timeout=3)
                    logger.info("‚úÖ Editing Control detected.")
                except Exception:
                    logger.warning("‚ö†Ô∏è Editing Control not found after double-click, may fail.")

                # Step 4: Open dropdown and choose REJECT
                send_keys("%{DOWN}")
                time.sleep(0.3)
                send_keys("REJECT{ENTER}")
                logger.info("‚úÖ Selected REJECT via keyboard.")
                time.sleep(0.5)

                # Step 5: Save changes
                safe_click(peak_margin_win, title="Save", control_type="Button")
                logger.info("üíæ Clicked Save button.")
                time.sleep(1)

                # Step 6: Handle confirmation popup
                try:
                    popup = app.window(best_match="Risk Management System")
                    popup.wait("visible", timeout=5)
                    safe_click(popup, auto_id="2", control_type="Button")
                    logger.info("Clicked OK on confirmation popup.")
                except Exception:
                    logger.warning("No confirmation popup after save.")

                return  # ‚úÖ Success

        logger.debug("Row not matched yet, retrying...")
        time.sleep(poll_interval)

    raise RuntimeError(f"No row found with Start Time={target_start_time} & Status=PENDING within {max_wait_seconds}s")
