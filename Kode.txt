def handle_peak_margin(app, main_win):
    logger.info("Looking for Peak Margin panel inside main window...")

    try:
        peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
        peak_margin_win.wait("visible", timeout=10)
        logger.info("Peak Margin panel detected and ready.")
    except TimeoutError:
        logger.error("Peak Margin panel not found. Dumping children for debugging...")
        logger.error(main_win.print_control_identifiers())
        raise

    # Click Add button inside Peak Margin window
    safe_click(peak_margin_win, title="Add", control_type="Button")

    # ---- Enter Start/End Times ----
    now = datetime.now()
    start_time = (datetime.combine(now.date(), datetime.min.time()) + timedelta(hours=17) +
                  timedelta(minutes=random.randint(0, 59))).strftime("%H:%M:%S")
    end_time = (datetime.strptime(start_time, "%H:%M:%S") + timedelta(minutes=10)).strftime("%H:%M:%S")
    exec_time = start_time

    logger.info(f"Filling row with Start={start_time}, End={end_time}")

    grid = peak_margin_win.child_window(control_type="Table")
    grid.wait("exists", timeout=10)
    grid.set_focus()
    grid.type_keys("{DOWN}" + start_time + "{TAB}" + end_time + "{TAB}" + exec_time + "{TAB}Y{TAB}")

    # Save changes
    safe_click(peak_margin_win, title="Save", control_type="Button")
    time.sleep(2)

    # Verify PENDING status
    all_text = [c.window_text() for c in grid.children()]
    if any("PENDING" in s.upper() for s in all_text):
        logger.info("Status verification PASSED: PENDING found.")
    else:
        logger.warning("Status verification FAILED: No PENDING row found.")
