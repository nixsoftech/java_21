import os
import time
import logging
import sys
from datetime import datetime
from pywinauto import Application
from pywinauto.findwindows import ElementNotFoundError
from pywinauto.timings import TimeoutError

# === Setup Logging ===
script_name = os.path.splitext(os.path.basename(sys.argv[0]))[0]
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f"{script_name}_{datetime.now().strftime('%Y-%m-%d_%H%M')}.log")

logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def safe_type(control, value, desc, retries=5, delay=2):
    """Type into a control with retries."""
    for attempt in range(retries):
        try:
            control.wait("enabled", timeout=5)
            control.type_keys(value, with_spaces=True, set_foreground=True)
            logger.info(f"Typed {desc}")
            return True
        except (ElementNotFoundError, TimeoutError):
            logger.warning(f"Retry {attempt+1}/{retries}: Failed to type {desc}")
            time.sleep(delay)
    logger.error(f"Failed to type {desc}")
    return False


def safe_select(control, value, desc, retries=5, delay=2):
    """Select from ComboBox with retries."""
    for attempt in range(retries):
        try:
            control.wait("enabled", timeout=5)
            control.select(value)
            logger.info(f"Selected {desc}: {value}")
            return True
        except (ElementNotFoundError, TimeoutError):
            logger.warning(f"Retry {attempt+1}/{retries}: Failed to select {desc}")
            time.sleep(delay)
    logger.error(f"Failed to select {desc}")
    return False


def safe_click(control, desc, retries=5, delay=2):
    """Click a control with retries."""
    for attempt in range(retries):
        try:
            control.wait("enabled", timeout=5)
            control.click_input()
            logger.info(f"Clicked {desc}")
            return True
        except (ElementNotFoundError, TimeoutError):
            logger.warning(f"Retry {attempt+1}/{retries}: Failed to click {desc}")
            time.sleep(delay)
    logger.error(f"Failed to click {desc}")
    return False


def login(app):
    """Perform login with retries for each field."""
    try:
        dlg = app.window(title_re=".*Risk Management System - Login")
        dlg.wait("visible", timeout=30)
        logger.info("Login window detected ✅")
    except TimeoutError:
        logger.error("Login window not found! Exiting.")
        return False

    # Username
    user_field = dlg.child_window(auto_id="txt_UserId", control_type="Edit")
    safe_type(user_field, "QA1", "Username")

    # Password
    pass_field = dlg.child_window(auto_id="txt_Password", control_type="Edit")
    safe_type(pass_field, "change@1212", "Password")

    # Environment
    env_combo = dlg.child_window(auto_id="cmb_Envionrnment", control_type="ComboBox")
    safe_select(env_combo, "PROD", "Environment")

    # Login Method
    login_combo = dlg.child_window(auto_id="cmb_loginMethod", control_type="ComboBox")
    safe_select(login_combo, "RMS", "Login Method")

    # Submit
    submit_btn = dlg.child_window(auto_id="btn_Submit", control_type="Button")
    safe_click(submit_btn, "Submit Button")

    logger.info("Clicked Submit... waiting for popup")
    return True


def handle_post_login_popups(app):
    """Handle optional popups appearing after login."""
    start = time.time()
    while time.time() - start < 60:
        try:
            popup = app.window(title_re=".*")
            popup.wait("visible", timeout=5)
            popup_text = popup.window_text()
            logger.info(f"Popup detected: {popup_text}")

            if "Intra DLyMGN File Gen Got abandoned" in popup_text:
                ok_btn = popup.child_window(title="OK", control_type="Button")
                safe_click(ok_btn, "OK on DLyMGN popup")
                # Check for close RMS popup after clicking OK
                time.sleep(2)
                try:
                    popup2 = app.window(title_re=".*")
                    popup2.wait("visible", timeout=3)
                    if "Do you want to close the RMS" in popup2.window_text():
                        safe_click(popup2.child_window(title="No", control_type="Button"), "No on Close RMS popup")
                except TimeoutError:
                    logger.info("No 'Close RMS' popup appeared after DLyMGN")
                break

            elif "Do you want to close the RMS" in popup_text:
                safe_click(popup.child_window(title="No", control_type="Button"), "No on Close RMS popup")
                break

        except TimeoutError:
            time.sleep(3)  # retry until 60s timeout


def main():
    logger.info("=== Script Started ===")
    app = Application(backend="uia").start(
        r"D:\Program Files (x86)\NCCL Ltd\RMSSetup\RMS FE.exe"
    )

    if login(app):
        handle_post_login_popups(app)
        logger.info("Login + popup handling done ✅")
    else:
        logger.error("Login failed, exiting...")
    logger.info("=== Script Finished ===")


if __name__ == "__main__":
    main()
