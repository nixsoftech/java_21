def handle_post_login_popups(app, main_win, timeout=20):
    """
    Handles sequential popups after login:
    1. "BMS OpmsEngine Got abandoned..." -> OK (AutomationId=2)
    2. "Do you want to close RMS ?" -> NO (AutomationId=7)
    """

    try:
        logger.info("Waiting for 'BMS OpmsEngine Got abandoned' popup...")
        popup1 = main_win.child_window(title="Risk Management System", control_type="Window")
        popup1.wait("visible", timeout=timeout)
        popup1_text = popup1.window_text().strip()
        logger.info(f"[Popup1] Detected: '{popup1_text}'")

        try:
            btn_ok = popup1.child_window(auto_id="2", control_type="Button")
            btn_ok.wait("enabled", timeout=5).click_input()
            logger.info("[Popup1] Clicked OK (AutomationId=2)")
        except Exception as e:
            logger.error(f"[Popup1] Failed to click OK: {e}")
            logger.error(popup1.print_control_identifiers())

        time.sleep(2)

        logger.info("Waiting for 'Do you want to close RMS' popup...")
        popup2 = main_win.child_window(title_re=".*", control_type="Window")
        popup2.wait("visible", timeout=timeout)
        popup2_text = popup2.window_text().strip()
        logger.info(f"[Popup2] Detected: '{popup2_text}'")

        try:
            btn_no = popup2.child_window(auto_id="7", control_type="Button")
            btn_no.wait("enabled", timeout=5).click_input()
            logger.info("[Popup2] Clicked NO (AutomationId=7)")
        except Exception as e:
            logger.error(f"[Popup2] Failed to click NO: {e}")
            logger.error(popup2.print_control_identifiers())

    except TimeoutError:
        logger.warning("No post-login popups appeared within timeout.")
