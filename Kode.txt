from pywinauto.keyboard import send_keys
import time
import logging

def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=25, poll_interval=1):
    logger.info(f"Looking for Peak Margin panel to reject Start Time={target_start_time}...")
    
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)
    
    end_time = time.time() + max_wait_seconds
    last_exception = None

    while time.time() < end_time:
        try:
            # Dump rows
            rows = dump_peak_margin_grid(peak_margin_win)
            for r_idx, (row_cells, row_values) in enumerate(rows):
                if len(row_values) < 6:
                    continue
                start_time_val = row_values[1]
                status_val = row_values[5]
                
                if start_time_val == target_start_time and status_val.upper() == "PENDING":
                    logger.info(f"✅ Matched row {r_idx} with Start Time={start_time_val}, Status={status_val}")
                    
                    # 1️⃣ Click the checkbox (already working)
                    row_cells[-1].click_input()
                    time.sleep(0.3)
                    
                    # 2️⃣ Click on the PENDING cell to focus the combo box
                    status_cell = row_cells[5]
                    status_cell.click_input()
                    time.sleep(0.3)
                    
                    # 3️⃣ Send Alt+Down to open the dropdown
                    send_keys("%{DOWN}")  # Alt+Down
                    time.sleep(0.3)
                    
                    # 4️⃣ Send arrow down / REJECT selection
                    # Try typing "REJECT" and Enter (works for WinForms combo box)
                    send_keys("REJECT{ENTER}")
                    logger.info("Changed Status to REJECT.")
                    time.sleep(0.5)
                    
                    # 5️⃣ Click Save
                    safe_click(peak_margin_win, title="Save", control_type="Button")
                    time.sleep(1)
                    
                    # 6️⃣ Handle confirmation popup if any
                    try:
                        popup = app.window(best_match="Risk Management System")
                        popup.wait("visible", timeout=8)
                        safe_click(popup, auto_id="2", control_type="Button")
                        logger.info("Clicked OK on confirmation popup.")
                    except Exception:
                        logger.warning("No confirmation popup after save.")
                    
                    return
            time.sleep(poll_interval)
        except Exception as e:
            last_exception = e
            time.sleep(poll_interval)
    
    msg = f"No row found with Start Time={target_start_time} & Status=PENDING within {max_wait_seconds}s"
    logger.error(msg)
    if last_exception:
        logger.debug(f"Last exception: {last_exception}")
    raise RuntimeError(msg)
