def handle_peak_margin_add(app, main_win):
    logger.info("Looking for Peak Margin panel inside main window...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    logger.info("Peak Margin panel detected. Clicking Add...")
    safe_click(peak_margin_win, title="Add", control_type="Button")
    time.sleep(2)  # ✅ give enough time for row to appear

    tables = peak_margin_win.descendants(control_type="Table") + peak_margin_win.descendants(control_type="List")
    if not tables:
        raise RuntimeError("No tables/list views found in Peak Margin window after clicking Add")

    grid = tables[0]

    # Keep trying until we get a full row (8 cells)
    for attempt in range(5):
        all_data_items = grid.descendants(control_type="DataItem")
        if len(all_data_items) >= 8:  # ✅ wait until full row is available
            break
        logger.warning(f"Attempt {attempt+1}: Only {len(all_data_items)} cells found, retrying...")
        time.sleep(1)

    if len(all_data_items) < 8:
        raise RuntimeError(f"Still not enough cells after Add: found {len(all_data_items)}")

    columns_per_row = 8
    rows = [all_data_items[i:i + columns_per_row] for i in range(0, len(all_data_items), columns_per_row)]
    last_row_cells = rows[-1]
    logger.info(f"Selected last row with {len(last_row_cells)} cells.")

    now = datetime.now()
    start_time = (datetime.combine(now.date(), datetime.min.time()) +
                  timedelta(hours=17, minutes=random.randint(0, 59))).strftime("%H:%M:%S")
    end_time = (datetime.strptime(start_time, "%H:%M:%S") + timedelta(minutes=10)).strftime("%H:%M:%S")
    logger.info(f"Filling new row with Start={start_time}, End={end_time}")

    set_cell_value(last_row_cells[1], start_time)
    set_cell_value(last_row_cells[2], end_time)

    safe_click(peak_margin_win, title="Save", control_type="Button")
    time.sleep(2)

    try:
        popup = app.window(best_match="Risk Management System")
        popup.wait("visible", timeout=10)
        safe_click(popup, auto_id="2", control_type="Button")
    except Exception as e:
        logger.error(f"Failed to handle confirmation popup: {e}")
        raise

    return start_time
