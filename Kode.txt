def handle_peak_margin(app, main_win):
    logger.info("Looking for Peak Margin panel inside main window...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    logger.info("Peak Margin panel detected. Clicking Add...")
    safe_click(peak_margin_win, title="Add", control_type="Button")
    time.sleep(1)

    grid = peak_margin_win.child_window(control_type="Table")
    grid.wait("exists ready", timeout=10)

    all_data_items = grid.descendants(control_type="DataItem")
    if not all_data_items:
        raise RuntimeError("No data cells found in grid after clicking Add")

    logger.info(f"Detected {len(all_data_items)} data cells in grid.")
    columns_per_row = 4  # assuming 4 columns per row
    rows = [all_data_items[i:i + columns_per_row] for i in range(0, len(all_data_items), columns_per_row)]
    last_row_cells = rows[-1]
    logger.info(f"Selected last row with {len(last_row_cells)} cells.")

    now = datetime.now()
    start_time = (datetime.combine(now.date(), datetime.min.time()) +
                  timedelta(hours=17, minutes=random.randint(0, 59))).strftime("%H:%M:%S")
    end_time = (datetime.strptime(start_time, "%H:%M:%S") + timedelta(minutes=10)).strftime("%H:%M:%S")

    logger.info(f"Filling new row with Start={start_time}, End={end_time} (Executable/Flag skipped)")

    try:
        # --- Step 1: Select first cell and type Start Time ---
        last_row_cells[0].click_input()
        time.sleep(0.3)
        send_keys("^a{BACKSPACE}")  # clear cell
        send_keys(start_time)
        send_keys("{TAB}")
        logger.info(f"Entered Start Time: {start_time}")

        time.sleep(0.3)

        # --- Step 2: Type End Time in next cell ---
        send_keys("^a{BACKSPACE}")
        send_keys(end_time)
        send_keys("{TAB}")
        logger.info(f"Entered End Time: {end_time}")

        time.sleep(0.5)

    except Exception as e:
        logger.error(f"Failed to fill row data: {e}")
        raise

    # Save the entry
    safe_click(peak_margin_win, title="Save", control_type="Button")
    time.sleep(2)
    logger.info("Row filled (Start & End) and saved successfully.")
