import os
import time
import logging
from datetime import datetime
from pywinauto.application import Application
from pywinauto.timings import TimeoutError


# ---------------- Logging Setup ----------------
script_name = os.path.splitext(os.path.basename(__file__))[0]
log_dir = os.path.join(os.getcwd(), "logs")
os.makedirs(log_dir, exist_ok=True)

timestamp = datetime.now().strftime("%Y-%m-%d_%H%M%S")
log_file = os.path.join(log_dir, f"{script_name}_{timestamp}.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_file, mode="w", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def safe_click(control, name, retries=3, delay=1):
    """Safely click a control with retries"""
    for attempt in range(retries):
        try:
            control.wait("enabled", timeout=5).click_input()
            logger.info(f"Clicked {name}")
            return True
        except Exception as e:
            logger.warning(f"Retry {attempt+1}/{retries} for {name} (Error: {e})")
            time.sleep(delay)
    logger.error(f"Failed to click {name}")
    return False


def handle_popups(app):
    """Handle multiple possible popups after login"""
    try:
        popup = app.window(title_re=".*")
        popup.wait("visible", timeout=5)

        # Case 1: Intra DLyMGN popup
        if popup.window_text().startswith("Intra DLyMGN"):
            logger.info("Detected Intra DLyMGN popup")
            ok_btn = popup.child_window(title="OK", control_type="Button")
            safe_click(ok_btn, "OK button on DLyMGN popup")

            # After clicking OK, check if "Do you want to close RMS?" appears
            try:
                popup2 = app.window(title_re=".*")
                popup2.wait("visible", timeout=3)
                if "Do you want to close the RMS" in popup2.window_text():
                    no_btn = popup2.child_window(title="No", control_type="Button")
                    safe_click(no_btn, "No button on Close RMS popup")
            except TimeoutError:
                logger.info("No Close RMS popup appeared after DLyMGN")
        
        # Case 2: Directly asking to close RMS
        elif "Do you want to close the RMS" in popup.window_text():
            logger.info("Detected Close RMS popup")
            no_btn = popup.child_window(title="No", control_type="Button")
            safe_click(no_btn, "No button on Close RMS popup")
        else:
            logger.info("Other popup detected → dismissing with OK/Yes if present")
            if popup.child_window(title="OK", control_type="Button").exists():
                safe_click(popup.child_window(title="OK", control_type="Button"), "Generic OK button")
            elif popup.child_window(title="Yes", control_type="Button").exists():
                safe_click(popup.child_window(title="Yes", control_type="Button"), "Generic Yes button")
    except TimeoutError:
        logger.info("No popup appeared after login")


def login(app):
    """Perform login with retries for each field"""
    dlg = app.window(title_re=".*Risk Management System - Login")
    dlg.wait("visible", timeout=30)

    # Fill Username
    for _ in range(3):
        try:
            dlg.child_window(auto_id="txt_UserId", control_type="Edit").type_keys("QA1", set_foreground=True)
            break
        except TimeoutError:
            time.sleep(1)

    # Fill Password
    for _ in range(3):
        try:
            dlg.child_window(auto_id="txt_Password", control_type="Edit").type_keys("change@1212", set_foreground=True)
            break
        except TimeoutError:
            time.sleep(1)

    # Select Environment
    for _ in range(3):
        try:
            dlg.child_window(auto_id="cmb_Envionrnment", control_type="ComboBox").select("UAT")
            break
        except TimeoutError:
            time.sleep(1)

    # Select Login via
    for _ in range(3):
        try:
            dlg.child_window(auto_id="cmb_loginMethod", control_type="ComboBox").select("RMS")
            break
        except TimeoutError:
            time.sleep(1)

    # Submit
    safe_click(dlg.child_window(auto_id="btn_Submit", control_type="Button"), "Submit button")
    handle_popups(app)


def check_rms_running(app):
    """Check if RMS is running by reading status bar text"""
    main_window = app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*")
    main_window.wait("visible", timeout=20)

    try:
        status = main_window.child_window(title_re="RMS Running.*", control_type="Text")
        if status.exists():
            logger.info(f"✅ RMS is running: {status.window_text()}")
            return True
    except Exception:
        logger.warning("⚠️ RMS Running status not found")
    return False


def navigate_peak_margin(app):
    """Navigate to RMS Configuration → Peak Margin"""
    main_window = app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*")
    main_window.wait("visible", timeout=20)

    safe_click(main_window.child_window(title="RMS Configuration", control_type="MenuItem"), "RMS Configuration menu")
    safe_click(main_window.child_window(title="Peak Margin", control_type="MenuItem"), "Peak Margin menu")

    peak_win = app.window(title_re=".*Peak Margin")
    peak_win.wait("visible", timeout=15)
    logger.info("✅ Peak Margin window is open")


def exit_app(app):
    """Exit the RMS application"""
    main_window = app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*")
    main_window.wait("visible", timeout=20)

    safe_click(main_window.child_window(title="Exit", control_type="MenuItem"), "Exit menu")

    try:
        popup = app.window(title_re=".*")
        popup.wait("visible", timeout=5)
        yes_btn = popup.child_window(title="Yes", control_type="Button")
        safe_click(yes_btn, "Yes button on Exit popup")
    except TimeoutError:
        logger.warning("Exit popup not found, app may have closed")


def main():
    logger.info("=== Script Started ===")
    app = Application(backend="uia").start(
        r"D:\Program Files (x86)\NCCL Ltd\RMSSetup\RMS FE.exe"
    )

    try:
        login(app)
        if check_rms_running(app):
            navigate_peak_margin(app)
        else:
            logger.warning("RMS not running → skipping automation")
    finally:
        exit_app(app)
        logger.info("=== Script Finished ===")


if __name__ == "__main__":
    main()
