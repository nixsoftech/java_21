import time
import os
import logging
from datetime import datetime
from pywinauto.application import Application
from pywinauto.timings import TimeoutError

# ---------------- Logging Setup ----------------
script_name = os.path.splitext(os.path.basename(__file__))[0]
log_dir = os.path.join(os.getcwd(), "logs")
os.makedirs(log_dir, exist_ok=True)

timestamp = datetime.now().strftime("%Y-%m-%d_%H%M%S")
log_file = os.path.join(log_dir, f"{script_name}_{timestamp}.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_file, mode="w", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# ---------------- Helper Functions ----------------
def safe_type(window, auto_id, control_type, text, retries=5, delay=2):
    """Retry typing text into a control until success or retries exhausted."""
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).type_keys(text, with_spaces=True)
            logger.info(f"Typed '{text}' into {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to type into {auto_id} after {retries} attempts")


def safe_select(window, auto_id, control_type, value, retries=5, delay=2):
    """Retry selecting a value in a ComboBox until success or retries exhausted."""
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).select(value)
            logger.info(f"Selected '{value}' in {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to select {value} in {auto_id} after {retries} attempts")


def safe_click(window, auto_id=None, title=None, control_type="Button", retries=5, delay=2):
    """Retry clicking a button until success or retries exhausted."""
    for attempt in range(1, retries + 1):
        try:
            if auto_id:
                ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            else:
                ctrl = window.child_window(title=title, control_type=control_type)

            ctrl.wait("enabled", timeout=5).click_input()
            logger.info(f"Clicked {auto_id or title} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id or title}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to click {auto_id or title} after {retries} attempts")


def check_and_handle_popups(app, timeout=10):
    """Check for and handle specific popups after login."""
    try:
        # Check for "Intra DLyMGN File Gen Got abandoned at Primary" popup
        try:
            popup1 = app.window(title_re=".*Intra DLyMGN File Gen Got abandoned at Primary.*")
            popup1.wait("visible", timeout=5)
            safe_click(popup1, title="OK", control_type="Button")
            logger.info("Clicked OK on 'Intra DLyMGN File Gen' popup")
            time.sleep(2)
        except TimeoutError:
            logger.info("No 'Intra DLyMGN File Gen' popup found")
        
        # Check for "Do you want to close the RMS?" popup
        try:
            popup2 = app.window(title_re=".*Do you want to close the RMS?.*")
            popup2.wait("visible", timeout=5)
            safe_click(popup2, title="No", control_type="Button")
            logger.info("Clicked No on 'Close RMS' popup")
            time.sleep(2)
        except TimeoutError:
            logger.info("No 'Close RMS' popup found")
            
    except Exception as e:
        logger.warning(f"Error handling popups: {e}")


def check_rms_running(main_win, timeout=30):
    """Check if RMS is running by looking for the status text."""
    logger.info("Checking if RMS is running...")
    
    for attempt in range(1, 6):
        try:
            # Look for the RMS Running status text
            status_text = main_win.child_window(title_re=".*RMS Running.*", control_type="Text")
            status_text.wait("visible", timeout=10)
            
            status = status_text.window_text()
            logger.info(f"RMS Status: {status}")
            
            if "RMS Running" in status:
                logger.info("âœ“ RMS is running successfully")
                return True
            else:
                logger.warning(f"RMS status indicates it might not be running: {status}")
                time.sleep(5)
                
        except Exception as e:
            logger.warning(f"Attempt {attempt} to find RMS status failed: {e}")
            time.sleep(5)
    
    logger.error("RMS does not appear to be running based on status check")
    return False


def navigate_to_peak_margin(main_win):
    """Navigate to RMS Configuration -> Peak Margin."""
    logger.info("Navigating to Peak Margin...")
    
    try:
        # Click on RMS Configuration menu
        safe_click(main_win, title="RMS Configuration", control_type="MenuItem")
        logger.info("Clicked RMS Configuration menu")
        time.sleep(2)
        
        # Click on Peak Margin submenu
        # Since it's a submenu, we need to find it under the RMS Configuration menu
        config_menu = main_win.child_window(title="RMS Configuration", control_type="MenuItem")
        config_menu.click_input()
        
        # Wait for the submenu to appear and click Peak Margin
        peak_margin_item = main_win.child_window(title="Peak Margin", control_type="MenuItem")
        peak_margin_item.wait("visible", timeout=10)
        peak_margin_item.click_input()
        logger.info("Clicked Peak Margin submenu")
        
        # Wait for Peak Margin window to open
        peak_margin_win = app.window(title="Peak Margin")
        peak_margin_win.wait("visible", timeout=15)
        logger.info("Peak Margin window opened successfully")
        
        return True
        
    except Exception as e:
        logger.error(f"Failed to navigate to Peak Margin: {e}")
        return False


# ---------------- Main Script ----------------
try:
    logger.info("Starting RMS Application...")
    app = Application(backend="uia").start(
        r"D:\Program Files (x86)\NCCL Ltd\RMSSetup\RMS FE.exe"
    )

    # Wait for Login window
    dlg = app.window(title_re=".*Risk Management System - Login")
    dlg.wait("visible", timeout=30)
    logger.info("Login window found.")

    # Fill login fields with retries
    safe_type(dlg, "txt_UserId", "Edit", "QA1")
    safe_type(dlg, "txt_Password", "Edit", "change@1212")
    safe_select(dlg, "cmb_Envionrnment", "ComboBox", "UAT")
    safe_select(dlg, "cmb_loginMethod", "ComboBox", "RMS")

    # Click Submit
    safe_click(dlg, auto_id="btn_Submit", control_type="Button")
    logger.info("Clicked Submit.")

    # Handle login popup (Yes/No) with retry
    try:
        popup = app.window(title_re=".*")
        popup.wait("visible", timeout=15)
        safe_click(popup, title="Yes", control_type="Button")
        logger.info("Clicked Yes on environment popup.")
    except TimeoutError:
        logger.warning("No login popup appeared.")

    # Wait for Main Window
    main_win = app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*")
    main_win.wait("visible", timeout=40)
    logger.info("Main RMS window is loaded")

    # Handle specific popups after login
    check_and_handle_popups(app)
    
    # Check if RMS is running
    if not check_rms_running(main_win):
        logger.error("RMS is not running. Exiting automation.")
        raise Exception("RMS is not running")
    
    # Navigate to RMS Configuration -> Peak Margin
    if navigate_to_peak_margin(main_win):
        logger.info("Successfully navigated to Peak Margin")
        time.sleep(3)  # Wait for Peak Margin window to fully load
    else:
        logger.error("Failed to navigate to Peak Margin")
        raise Exception("Navigation to Peak Margin failed")

    # -------- EXIT FLOW --------
    # Click Exit menu item
    safe_click(main_win, title="Exit", control_type="MenuItem")
    logger.info("Clicked Exit menu item.")

    # Handle Exit confirmation popup
    try:
        exit_popup = app.window(title_re=".*")
        exit_popup.wait("visible", timeout=15)
        safe_click(exit_popup, title="Yes", control_type="Button")
        logger.info("Clicked Yes on Exit confirmation popup")
    except TimeoutError:
        logger.warning("No exit confirmation popup appeared.")

    logger.info("Automation script completed successfully.")

except Exception as e:
    logger.exception(f"Automation failed: {e}")
