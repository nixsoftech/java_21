def handle_peak_margin(app, main_win):
    logger.info("Looking for Peak Margin panel inside main window...")

    try:
        peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
        peak_margin_win.wait("visible", timeout=10)
        logger.info("Peak Margin panel detected and ready.")
    except TimeoutError:
        logger.error("Peak Margin panel not found. Dumping children for debugging...")
        logger.error(main_win.print_control_identifiers())
        raise

    # ---- Step 1: Click Add Button ----
    safe_click(peak_margin_win, title="Add", control_type="Button")
    time.sleep(1)

    # ---- Step 2: Get all DataItems inside the Table ----
    grid = peak_margin_win.child_window(control_type="Table")
    grid.wait("exists ready", timeout=10)

    all_data_items = grid.descendants(control_type="DataItem")
    if not all_data_items:
        logger.error("No DataItems detected inside Peak Margin grid!")
        raise RuntimeError("No data cells found in grid after clicking Add")

    logger.info(f"Detected {len(all_data_items)} data cells in grid.")
    # Group cells by rows (assuming equal number of columns per row)
    # You may need to adjust this based on number of columns
    columns_per_row = 4  # Start Time, End Time, Executable Time, Flag (adjust if more)
    rows = [all_data_items[i:i+columns_per_row] for i in range(0, len(all_data_items), columns_per_row)]

    last_row_cells = rows[-1]
    logger.info(f"Selected last row with {len(last_row_cells)} cells.")

    now = datetime.now()
    start_time = (datetime.combine(now.date(), datetime.min.time()) + timedelta(hours=17) +
                  timedelta(minutes=random.randint(0, 59))).strftime("%H:%M:%S")
    end_time = (datetime.strptime(start_time, "%H:%M:%S") + timedelta(minutes=10)).strftime("%H:%M:%S")
    exec_time = start_time
    logger.info(f"Filling new row with Start={start_time}, End={end_time}, Exec={exec_time}")

    try:
        # Fill Start Time
        last_row_cells[0].double_click_input()
        send_keys(start_time)
        send_keys("{TAB}")
        time.sleep(0.2)

        # Fill End Time
        last_row_cells[1].double_click_input()
        send_keys(end_time)
        send_keys("{TAB}")
        time.sleep(0.2)

        # Fill Executable Time
        last_row_cells[2].double_click_input()
        send_keys(exec_time)
        send_keys("{TAB}")
        time.sleep(0.2)

        # Fill Flag
        last_row_cells[3].double_click_input()
        send_keys("Y")
        send_keys("{TAB}")

    except Exception as e:
        logger.error(f"Failed to fill row data: {e}")
        for idx, cell in enumerate(last_row_cells):
            logger.error(f"Cell[{idx}] -> {cell.window_text()}")
        raise

    safe_click(peak_margin_win, title="Save", control_type="Button")
    time.sleep(2)

    logger.info("Row filled and saved successfully.")
