def handle_peak_margin_reject_for_rash1(app, peak_margin_win, target_start_time):
    """
    Find the row matching target_start_time, tick the edit checkbox,
    open Status ComboBox, select REJECT, then save.
    """
    logger.info(f"Looking for Peak Margin panel for rash1 to reject start_time={target_start_time}...")
    rows = dump_peak_margin_grid(peak_margin_win)

    matched_row = None
    for idx, row_values in enumerate(rows):
        if len(row_values) > 1 and row_values[1] == target_start_time:
            matched_row = idx
            logger.info(f"✅ Matched row {idx} with Start Time={target_start_time}, Status={row_values[5]}")
            break

    if matched_row is None:
        logger.error(f"❌ No row found with Start Time={target_start_time}")
        return

    try:
        grid = peak_margin_win.child_window(control_type="Table")
        row_ctrl = grid.children(control_type="DataItem")[matched_row]
        cells = row_ctrl.children()

        # 1️⃣ Click Edit checkbox
        checkbox_cell = cells[-1]
        checkbox = checkbox_cell.child_window(control_type="CheckBox")
        checkbox.click_input()
        logger.info("✅ Clicked edit checkbox.")
        time.sleep(0.5)

        # 2️⃣ Click Status cell to activate combo
        status_cell = cells[5]
        status_cell.click_input()
        time.sleep(0.5)

        combo = peak_margin_win.child_window(control_type="ComboBox", title="Editing Control")
        combo.wait("visible", timeout=5)
        combo.expand()
        logger.info("✅ ComboBox expanded.")
        time.sleep(0.5)

        reject_item = combo.child_window(title="REJECT", control_type="ListItem")
        reject_item.wait("visible", timeout=5)
        reject_item.invoke()
        logger.info("✅ Selected REJECT from dropdown.")
        time.sleep(0.5)

        save_btn = peak_margin_win.child_window(title="Save", control_type="Button")
        save_btn.click_input()
        logger.info("Clicked Save after selecting REJECT.")
        time.sleep(1)

    except Exception as e:
        logger.error(f"Failed to process row for rash1: {e}")
