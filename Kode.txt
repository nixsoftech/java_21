def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=20, poll_interval=1):
    logger.info(f"Looking for Peak Margin panel for rash1 to reject Start Time={target_start_time}...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    end_time = time.time() + max_wait_seconds
    last_exception = None
    row_handled = False

    while time.time() < end_time and not row_handled:
        try:
            rows = dump_peak_margin_grid(peak_margin_win)
            for r_idx, (row_cells, row_values) in enumerate(rows):
                if len(row_values) < 6:
                    continue

                start_time_val = row_values[1]
                status_val = row_values[5]

                if start_time_val == target_start_time and status_val.upper() == "PENDING":
                    logger.info(f"✅ Matched row {r_idx} with Start Time={start_time_val}, Status={status_val}")

                    # 1️⃣ Click checkbox (last column)
                    row_cells[-1].click_input()
                    time.sleep(0.5)  # allow focus stabilization

                    # 2️⃣ Click Status cell to focus it
                    status_cell = row_cells[5]
                    status_cell.click_input()
                    time.sleep(0.3)

                    # 3️⃣ Open dropdown via Alt+Down
                    send_keys("%{DOWN}")
                    time.sleep(0.3)

                    # 4️⃣ Type REJECT and press Enter
                    send_keys("REJECT{ENTER}")
                    logger.info("Changed Status to REJECT")

                    # 5️⃣ Save
                    safe_click(peak_margin_win, title="Save", control_type="Button")
                    time.sleep(1.5)

                    # 6️⃣ Handle confirmation popup
                    try:
                        popup = app.window(best_match="Risk Management System")
                        popup.wait("visible", timeout=8)
                        safe_click(popup, auto_id="2", control_type="Button")
                        logger.info("Clicked OK on confirmation popup.")
                    except Exception:
                        logger.warning("No confirmation popup after save.")

                    row_handled = True
                    break

            if not row_handled:
                time.sleep(poll_interval)

        except Exception as e:
            last_exception = e
            time.sleep(poll_interval)

    if not row_handled:
        msg = f"No row found with Start Time={target_start_time} & Status=PENDING within {max_wait_seconds}s"
        logger.error(msg)
        if last_exception:
            logger.debug(f"Last exception: {last_exception}")
        raise RuntimeError(msg)
