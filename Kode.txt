---
- name: Upgrade Ubuntu 18.04 to 22.04 with private repository (no python3-apt dependency)
  hosts: all
  become: yes
  vars:
    repo_url: "http://10.13.0.88:8080/ubuntu"
    script_execution_timeout: 14400  # 4 hours

  tasks:
    # ==========================================================
    # STEP 0: REMOVE i386 & CLEAN SOURCES
    # ==========================================================
    - name: Check if i386 is enabled
      ansible.builtin.command: dpkg --print-foreign-architectures
      register: arch_result
      changed_when: false

    - name: Remove i386 architecture if present
      ansible.builtin.raw: dpkg --remove-architecture i386 || true
      when: "'i386' in arch_result.stdout"

    - name: Remove any i386 entries from sources.list
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list
        regexp: '^\s*deb .*i386'
        state: absent

    - name: Remove i386 entries from /etc/apt/sources.list.d/
      ansible.builtin.shell: |
        grep -l "i386" /etc/apt/sources.list.d/*.list 2>/dev/null | xargs -r sed -i '/i386/d'
      changed_when: false

    - name: Clean apt cache
      ansible.builtin.raw: apt-get clean

    - name: Update apt cache after cleaning
      ansible.builtin.raw: apt-get update -y || true
      changed_when: false

    # ==========================================================
    # PHASE 1: 18.04 -> 20.04 (Bionic -> Focal)
    # ==========================================================
    - name: Add bionic repository manually
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/custom-bionic.list
        content: |
          deb [arch=amd64] {{ repo_url }} bionic main universe
          deb [arch=amd64] {{ repo_url }} bionic-updates main universe
          deb [arch=amd64] {{ repo_url }} bionic-security main universe
        mode: '0644'

    - name: Update apt cache for bionic
      ansible.builtin.raw: apt-get update -y || true
      changed_when: false

    - name: Remove lxd package (sometimes blocks upgrades)
      ansible.builtin.raw: apt-get remove --purge -y lxd || true
      changed_when: false

    - name: Copy auto-upgrade1.sh script
      ansible.builtin.copy:
        dest: /tmp/auto-upgrade1.sh
        mode: '0755'
        content: |
          #!/bin/bash
          set -e
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -yq
          apt-get upgrade -yq
          apt-get dist-upgrade -yq
          apt-get autoremove -yq
          apt-get install -yq update-manager-core

    - name: Execute auto-upgrade1.sh
      ansible.builtin.shell: /tmp/auto-upgrade1.sh
      async: "{{ script_execution_timeout }}"
      poll: 10
      ignore_errors: yes

    - name: Reboot if required after first upgrade
      ansible.builtin.shell: test -f /var/run/reboot-required && reboot || true
      async: 1
      poll: 0
      ignore_errors: yes

    - name: Copy do-release1.sh script (Bionic -> Focal)
      ansible.builtin.copy:
        dest: /tmp/do-release1.sh
        mode: '0755'
        content: |
          #!/bin/bash
          yes '' | sudo do-release-upgrade -f DistUpgradeViewNonInteractive
          apt-get autoremove -yq
          apt-get clean
          systemctl restart sshd

    - name: Execute do-release1.sh
      ansible.builtin.shell: /tmp/do-release1.sh
      async: "{{ script_execution_timeout }}"
      poll: 10
      ignore_errors: yes

    - name: Reboot after do-release1.sh
      ansible.builtin.shell: test -f /var/run/reboot-required && reboot || true
      async: 1
      poll: 0
      ignore_errors: yes

    # ==========================================================
    # PHASE 2: 20.04 -> 22.04 (Focal -> Jammy)
    # ==========================================================
    - name: Add focal repository manually
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/custom-focal.list
        content: |
          deb [arch=amd64] {{ repo_url }} focal main universe
          deb [arch=amd64] {{ repo_url }} focal-updates main universe
          deb [arch=amd64] {{ repo_url }} focal-security main universe
        mode: '0644'

    - name: Update apt cache for focal
      ansible.builtin.raw: apt-get update -y || true
      changed_when: false

    - name: Copy auto-upgrade2.sh script
      ansible.builtin.copy:
        dest: /tmp/auto-upgrade2.sh
        mode: '0755'
        content: |
          #!/bin/bash
          set -e
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -yq
          apt-get upgrade -yq
          apt-get dist-upgrade -yq
          apt-get autoremove -yq
          apt-get install -yq update-manager-core

    - name: Execute auto-upgrade2.sh
      ansible.builtin.shell: /tmp/auto-upgrade2.sh
      async: "{{ script_execution_timeout }}"
      poll: 10
      ignore_errors: yes

    - name: Reboot if required after auto-upgrade2.sh
      ansible.builtin.shell: test -f /var/run/reboot-required && reboot || true
      async: 1
      poll: 0
      ignore_errors: yes

    - name: Add jammy repository manually
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/custom-jammy.list
        content: |
          deb [arch=amd64] {{ repo_url }} jammy main universe
          deb [arch=amd64] {{ repo_url }} jammy-updates main universe
          deb [arch=amd64] {{ repo_url }} jammy-security main universe
        mode: '0644'

    - name: Update apt cache for jammy
      ansible.builtin.raw: apt-get update -y || true
      changed_when: false

    - name: Copy do-release2.sh script (Focal -> Jammy)
      ansible.builtin.copy:
        dest: /tmp/do-release2.sh
        mode: '0755'
        content: |
          #!/bin/bash
          yes '' | sudo do-release-upgrade -f DistUpgradeViewNonInteractive
          apt-get autoremove -yq
          apt-get clean
          systemctl restart sshd

    - name: Execute do-release2.sh
      ansible.builtin.shell: /tmp/do-release2.sh
      async: "{{ script_execution_timeout }}"
      poll: 10
      ignore_errors: yes

    - name: Reboot if required after do-release2.sh
      ansible.builtin.shell: test -f /var/run/reboot-required && reboot || true
      async: 1
      poll: 0
      ignore_errors: yes

    # ==========================================================
    # FINAL CHECK
    # ==========================================================
    - name: Check final OS version
      ansible.builtin.command: lsb_release -a
      register: os_release
      changed_when: false

    - name: Print final OS release
      ansible.builtin.debug:
        msg: "{{ os_release.stdout_lines }}"
