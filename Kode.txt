import time
import os
import logging
from datetime import datetime
from pywinauto.application import Application
from pywinauto.timings import TimeoutError

# ---------------- Logging Setup ----------------
script_name = os.path.splitext(os.path.basename(__file__))[0]
log_dir = os.path.join(os.getcwd(), "logs")
os.makedirs(log_dir, exist_ok=True)

timestamp = datetime.now().strftime("%Y-%m-%d_%H%M%S")
log_file = os.path.join(log_dir, f"{script_name}_{timestamp}.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_file, mode="w", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# ---------------- Helper Functions ----------------
def safe_type(window, auto_id, control_type, text, retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).type_keys(text, with_spaces=True)
            logger.info(f"Typed '{text}' into {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to type into {auto_id} after {retries} attempts")


def safe_select(window, auto_id, control_type, value, retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).select(value)
            logger.info(f"Selected '{value}' in {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to select {value} in {auto_id} after {retries} attempts")


def safe_click(window, auto_id=None, title=None, control_type="Button", retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            if auto_id:
                ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            else:
                ctrl = window.child_window(title=title, control_type=control_type)

            ctrl.wait("enabled", timeout=5).click_input()
            logger.info(f"Clicked {auto_id or title} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id or title}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to click {auto_id or title} after {retries} attempts")


def handle_popup(app, expected_text=None, click_button=None, timeout=30):
    """Wait for popup and optionally click a button if text matches."""
    try:
        popup = app.window(title_re=".*")
        popup.wait("visible", timeout=timeout)
        popup_text = popup.window_text()
        logger.info(f"Popup detected: '{popup_text}'")

        if expected_text and expected_text not in popup_text:
            logger.info(f"Popup text does not match expected '{expected_text}', skipping click")
            return False

        if click_button:
            try:
                safe_click(popup, title=click_button, control_type="Button")
                logger.info(f"Clicked '{click_button}' on popup.")
                return True
            except TimeoutError:
                logger.warning(f"Button '{click_button}' not found on popup.")
        return True
    except TimeoutError:
        logger.info(f"No popup appeared within {timeout}s.")
        return False


# ---------------- Main Script ----------------
try:
    logger.info("Starting RMS Application...")
    app = Application(backend="uia").start(
        r"D:\Program Files (x86)\NCCL Ltd\RMSSetup\RMS FE.exe"
    )

    # Wait for Login window
    dlg = app.window(title_re=".*Risk Management System - Login")
    dlg.wait("visible", timeout=30)
    logger.info("Login window found.")

    # Fill login fields with retries
    safe_type(dlg, "txt_UserId", "Edit", "QA1")
    safe_type(dlg, "txt_Password", "Edit", "change@1212")
    safe_select(dlg, "cmb_Envionrnment", "ComboBox", "UAT")
    safe_select(dlg, "cmb_loginMethod", "ComboBox", "RMS")

    # Click Submit
    safe_click(dlg, auto_id="btn_Submit", control_type="Button")
    logger.info("Clicked Submit.")

    # Handle environment popup (Yes)
    handle_popup(app, expected_text="Do you want to login to test/mock environment", click_button="Yes", timeout=20)

    # Wait for main window
    main_win = app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*")
    main_win.wait("visible", timeout=60)
    logger.info("Main RMS window is loaded.")

    # ---------------- Post-Login Popups ----------------
    logger.info("Waiting 30s for post-login popups...")
    time.sleep(30)

    handle_popup(app, expected_text="Intra DLyMGN File Gen Got abandoned at Primary", click_button="OK", timeout=5)
    handle_popup(app, expected_text="Do you want to close the RMS", click_button="No", timeout=5)

    # ---------------- Verify RMS Running ----------------
    try:
        status_bar = main_win.child_window(title_re="RMS Running.*", control_type="Text")
        status_bar.wait("visible", timeout=10)
        logger.info("RMS is running. Continuing automation tasks...")
    except TimeoutError:
        logger.error("RMS not running. Exiting automation.")
        raise

    # ---------------- Navigate to RMS Configuration -> Peak Margin ----------------
    safe_click(main_win, title="RMS Configuration", control_type="MenuItem")
    time.sleep(1)
    safe_click(main_win, title="Peak Margin", control_type="MenuItem")
    logger.info("Opened Peak Margin window.")
    time.sleep(3)

    # ---------------- Exit Application ----------------
    safe_click(main_win, title="Exit", control_type="MenuItem")
    handle_popup(app, expected_text="Do you want to close the RMS", click_button="Yes", timeout=10)
    logger.info("Application exited successfully âœ…")

except Exception as e:
    logger.exception(f"Automation failed: {e}")
