import time
import os
import logging
from datetime import datetime
from pywinauto.application import Application
from pywinauto.timings import TimeoutError

# ---------------- Logging Setup ----------------
script_name = os.path.splitext(os.path.basename(__file__))[0]
log_dir = os.path.join(os.getcwd(), "logs")
os.makedirs(log_dir, exist_ok=True)

timestamp = datetime.now().strftime("%Y-%m-%d_%H%M%S")
log_file = os.path.join(log_dir, f"{script_name}_{timestamp}.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_file, mode="w", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ---------------- Helper Functions ----------------
def safe_type(window, auto_id, control_type, text, retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).type_keys(text, with_spaces=True)
            logger.info(f"Typed '{text}' into {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to type into {auto_id} after {retries} attempts")

def safe_select(window, auto_id, control_type, value, retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).select(value)
            logger.info(f"Selected '{value}' in {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to select {value} in {auto_id} after {retries} attempts")

def safe_click(window, auto_id=None, title=None, control_type="Button", retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            if auto_id:
                ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            else:
                ctrl = window.child_window(title=title, control_type=control_type)
            ctrl.wait("enabled", timeout=5).click_input()
            time.sleep(0.5)
            logger.info(f"Clicked {auto_id or title} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id or title}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to click {auto_id or title} after {retries} attempts")

def handle_popup(app, expected_substring=None, auto_id_to_click=None, timeout=15):
    """Wait for a popup and click using AutomationId if provided."""
    try:
        popup = app.window(title_re=".*")
        popup.wait("visible", timeout=timeout)
        popup_text = popup.window_text().strip()
        logger.info(f"Popup detected: '{popup_text}'")

        if expected_substring and expected_substring.lower() not in popup_text.lower():
            logger.warning(f"Popup text does not contain expected '{expected_substring}', proceeding anyway...")

        if auto_id_to_click:
            try:
                btn = popup.child_window(auto_id=auto_id_to_click, control_type="Button")
                btn.wait("enabled", timeout=5).click_input()
                logger.info(f"Clicked popup button with AutomationId={auto_id_to_click}")
            except Exception as e:
                logger.error(f"Failed to click popup button with AutomationId={auto_id_to_click}: {e}")
        return True

    except TimeoutError:
        logger.info(f"No popup appeared within {timeout}s.")
        return False

def click_rms_configuration_and_peak_margin(main_win):
    """Navigate RMS Configuration â†’ Peak Margin using menu_select (preferred)."""
    try:
        logger.info("Navigating to RMS Configuration -> Peak Margin...")
        main_win.menu_select("RMS Configuration->Peak Margin")
        logger.info("Successfully opened Peak Margin window.")
    except Exception as e:
        logger.error(f"menu_select failed: {e}")
        logger.info("Falling back to manual click method...")

        try:
            # Fallback: manually click RMS Configuration then Peak Margin
            safe_click(main_win, title="RMS Configuration", control_type="MenuItem")
            time.sleep(1)
            peak_item = main_win.child_window(title="Peak Margin", control_type="MenuItem")
            peak_item.wait("enabled", timeout=5).click_input()
            logger.info("Clicked Peak Margin manually.")
        except Exception as e2:
            logger.error(f"Manual Peak Margin click also failed: {e2}")
            raise

# ---------------- Main Script ----------------
def main():
    try:
        logger.info("Starting RMS Application...")
        app = Application(backend="uia").start(
            r"D:\Program Files (x86)\NCCL Ltd\RMSSetup\RMS FE.exe"
        )

        dlg = app.window(title_re=".*Risk Management System - Login")
        dlg.wait("visible", timeout=30)
        logger.info("Login window found.")

        safe_type(dlg, "txt_UserId", "Edit", "rash1")
        safe_type(dlg, "txt_Password", "Edit", "change@1212")
        safe_select(dlg, "cmb_Envionrnment", "ComboBox", "UAT")
        safe_select(dlg, "cmb_loginMethod", "ComboBox", "RMS")
        safe_click(dlg, auto_id="btn_Submit", control_type="Button")
        logger.info("Clicked Submit.")

        # Handle login popup (Yes = AutomationId=6)
        handle_popup(app, expected_substring="login to test/mock environment", auto_id_to_click="6", timeout=10)

        main_win = app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*")
        main_win.wait("visible", timeout=40)
        logger.info("Main RMS window is loaded.")

        # Post-login wait & popups
        logger.info("Waiting 30s for delayed popups...")
        time.sleep(30)
        handle_popup(app, expected_substring="Intra DLyMGN", auto_id_to_click="2", timeout=5)
        handle_popup(app, expected_substring="Do you want to close the RMS", auto_id_to_click="7", timeout=5)

        # Check RMS Running
        try:
            status_bar = main_win.child_window(title_re=".*RMS Running.*", control_type="Text")
            status_bar.wait("visible", timeout=5)
            logger.info("RMS is running, continuing automation.")
        except TimeoutError:
            logger.warning("RMS running text not found, continuing anyway.")

        # Navigate RMS Configuration -> Peak Margin
        click_rms_configuration_and_peak_margin(main_win)
        time.sleep(5)

        # Exit RMS
        safe_click(main_win, title="Exit", control_type="MenuItem")
        handle_popup(app, auto_id_to_click="6", timeout=10)  # Yes button
        logger.info("Automation script completed successfully.")

    except Exception as e:
        logger.exception(f"Automation failed: {e}")

if __name__ == "__main__":
    main()
