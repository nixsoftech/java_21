import time
import os
import logging
from datetime import datetime
from pywinauto.application import Application
from pywinauto.timings import TimeoutError

# ---------------- Logging Setup ----------------
script_name = os.path.splitext(os.path.basename(__file__))[0]
log_dir = os.path.join(os.getcwd(), "logs")
os.makedirs(log_dir, exist_ok=True)

timestamp = datetime.now().strftime("%Y-%m-%d_%H%M%S")
log_file = os.path.join(log_dir, f"{script_name}_{timestamp}.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_file, mode="w", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ---------------- Helper Functions ----------------
def safe_type(window, auto_id, control_type, text, retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).type_keys(text, with_spaces=True)
            logger.info(f"Typed '{text}' into {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to type into {auto_id} after {retries} attempts")

def safe_select(window, auto_id, control_type, value, retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).select(value)
            logger.info(f"Selected '{value}' in {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to select {value} in {auto_id} after {retries} attempts")

def safe_click(window, auto_id=None, title=None, control_type="Button", retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            if auto_id:
                ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            else:
                ctrl = window.child_window(title=title, control_type=control_type)
            ctrl.wait("enabled", timeout=5).click_input()
            logger.info(f"Clicked {auto_id or title} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id or title}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to click {auto_id or title} after {retries} attempts")

def handle_popup(app, text_match=None, button_title="OK", timeout=30):
    """Wait for popup and click specified button if text matches (or always if no text_match)."""
    try:
        popup = app.window(title_re=".*")
        popup.wait("visible", timeout=timeout)
        popup_text = popup.window_text()
        if text_match is None or text_match in popup_text:
            logger.info(f"Popup appeared: {popup_text}")
            safe_click(popup, title=button_title, control_type="Button")
            logger.info(f"Clicked '{button_title}' on popup")
            return True
        logger.info(f"Popup text '{popup_text}' does not match '{text_match}'")
    except TimeoutError:
        logger.info(f"No popup appeared within {timeout}s")
    return False

# ---------------- Main Script ----------------
try:
    logger.info("Starting RMS Application...")
    app = Application(backend="uia").start(
        r"D:\Program Files (x86)\NCCL Ltd\RMSSetup\RMS FE.exe"
    )

    # Wait for Login window
    dlg = app.window(title_re=".*Risk Management System - Login")
    dlg.wait("visible", timeout=30)
    logger.info("Login window found.")

    # Fill login fields with retries
    safe_type(dlg, "txt_UserId", "Edit", "QA1")
    safe_type(dlg, "txt_Password", "Edit", "change@1212")
    safe_select(dlg, "cmb_Envionrnment", "ComboBox", "PROD")
    safe_select(dlg, "cmb_loginMethod", "ComboBox", "RMS")

    # Click Submit
    safe_click(dlg, auto_id="btn_Submit", control_type="Button")
    logger.info("Clicked Submit.")

    # Handle environment popup (YES)
    handle_popup(app, text_match="Do you want to login to test/mock environment", button_title="Yes", timeout=15)

    # Wait for Main Window
    main_win = app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*")
    main_win.wait("visible", timeout=40)
    logger.info("Main RMS window is loaded.")

    # Handle DLyMGN popup (if appears within 60s)
    handle_popup(app, text_match="Intra DLyMGN File Gen Got abandoned at Primary", button_title="OK", timeout=60)

    # ---- AUTOMATION TEST CASE ----
    try:
        safe_click(main_win, title="RMS Configuration", control_type="MenuItem")
        safe_click(main_win, title="Peak Margin", control_type="MenuItem")
        logger.info("Navigated to Peak Margin window.")
    except Exception as e:
        logger.warning(f"Failed to open Peak Margin: {e}")

    # ---- EXIT FLOW ----
    safe_click(main_win, title="Exit", control_type="MenuItem")
    handle_popup(app, text_match="Do you want to close the RMS", button_title="Yes", timeout=15)
    logger.info("Application exited successfully âœ…")

except Exception as e:
    logger.exception(f"Automation failed: {e}")
