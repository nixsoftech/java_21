def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=20, poll_interval=1):
    """
    Find row with given Start Time & PENDING status, tick checkbox,
    wait 1s, reset mouse, double-click PENDING cell, use Alt+Down to select REJECT.
    """
    logger.info(f"Looking for Peak Margin panel for rash1 to reject Start Time={target_start_time}...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    end_time = time.time() + max_wait_seconds
    last_exception = None

    while time.time() < end_time:
        try:
            rows = dump_peak_margin_grid(peak_margin_win)

            for r_idx, (row_cells, row_values) in enumerate(rows):
                if len(row_values) < 6:
                    continue

                start_time_val = row_values[1]
                status_val = row_values[5]

                if start_time_val == target_start_time and status_val.upper() == "PENDING":
                    logger.info(f"‚úÖ Matched row {r_idx} with Start Time={start_time_val}, Status={status_val}")

                    # 1Ô∏è‚É£ Click the checkbox
                    checkbox_cell = row_cells[-1]
                    if checkbox_cell.rectangle().width() > 0:
                        checkbox_cell.click_input()
                        logger.info("‚òëÔ∏è Selected checkbox.")
                    else:
                        logger.error("Checkbox cell not clickable ‚Äî aborting.")
                        raise RuntimeError("Checkbox cell has invalid rectangle.")
                    time.sleep(1.0)  # Wait 1 second after checkbox click as requested

                    # 2Ô∏è‚É£ Reset mouse position to status cell center
                    status_cell = row_cells[5]
                    rect = status_cell.rectangle()
                    x = rect.left + rect.width() // 2
                    y = rect.top + rect.height() // 2
                    from pywinauto.mouse import move, click
                    move(coords=(x, y))
                    logger.info(f"Reset mouse position to status cell center: ({x}, {y})")

                    # 3Ô∏è‚É£ Double-click Status cell (PENDING)
                    try:
                        if rect.width() > 0:
                            status_cell.click_input(double=True)
                            logger.info("üñ±Ô∏è Double-clicked Status cell (PENDING).")
                        else:
                            raise RuntimeError("Status cell rectangle invalid.")
                    except Exception as e:
                        logger.warning(f"Direct double-click failed: {e}, using mouse fallback.")
                        click(coords=(x, y), double=True)
                        logger.info("üñ±Ô∏è Double-clicked Status cell via manual coords.")
                    time.sleep(0.5)  # Brief pause for dropdown to initialize

                    # 4Ô∏è‚É£ Log mouse position for debugging
                    logger.info(f"Mouse position after status double-click: {pywinauto.mouse.get_position()}")

                    # 5Ô∏è‚É£ Use Alt+Down to open dropdown and type REJECT
                    try:
                        send_keys("%{DOWN}")
                        logger.info("Sent Alt+Down to open dropdown.")
                        time.sleep(0.3)
                        send_keys("REJECT{ENTER}")
                        logger.info("Typed REJECT and pressed ENTER.")
                        time.sleep(0.5)

                        # Verify if status changed
                        updated_rows = dump_peak_margin_grid(peak_margin_win)
                        if updated_rows[r_idx][1][5].upper() != "REJECT":
                            logger.warning("REJECT not applied; trying cell click to commit.")
                            row_cells[0].click_input()  # Click first cell to commit
                            time.sleep(0.5)
                    except Exception as e:
                        logger.error(f"Failed to interact with dropdown via keyboard: {e}")
                        raise RuntimeError(f"Could not select REJECT via keyboard: {e}")

                    # 6Ô∏è‚É£ Click Save
                    safe_click(peak_margin_win, title="Save", control_type="Button")
                    logger.info("üíæ Clicked Save.")
                    time.sleep(1.5)

                    # 7Ô∏è‚É£ Handle popup
                    try:
                        popup = app.window(best_match="Risk Management System")
                        popup.wait("visible", timeout=8)
                        safe_click(popup, auto_id="2", control_type="Button")
                        logger.info("Clicked OK on confirmation popup.")
                    except Exception:
                        logger.warning("No confirmation popup after save.")

                    return

            time.sleep(poll_interval)

        except Exception as e:
            last_exception = e
            time.sleep(poll_interval)

    msg = f"No row found with Start Time={target_start_time} & Status=PENDING within {max_wait_seconds}s"
    logger.error(msg)
    if last_exception:
        logger.debug(f"Last exception: {last_exception}")
    raise RuntimeError(msg)
