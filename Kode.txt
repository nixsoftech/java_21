def handle_peak_margin(app, main_win):
    logger.info("Looking for Peak Margin panel inside main window...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    logger.info("Peak Margin panel detected. Clicking Add...")
    safe_click(peak_margin_win, title="Add", control_type="Button")
    time.sleep(1)

    grid = peak_margin_win.child_window(control_type="Table")
    grid.wait("exists ready", timeout=10)

    all_data_items = grid.descendants(control_type="DataItem")
    if not all_data_items:
        raise RuntimeError("No data cells found in grid after clicking Add")

    logger.info(f"Detected {len(all_data_items)} data cells in grid.")
    columns_per_row = 4  # Assuming: Start, End, Exec, Flag
    rows = [all_data_items[i:i + columns_per_row] for i in range(0, len(all_data_items), columns_per_row)]
    last_row_cells = rows[-1]
    logger.info(f"Selected last row with {len(last_row_cells)} cells.")

    now = datetime.now()
    start_time = (datetime.combine(now.date(), datetime.min.time()) +
                  timedelta(hours=17, minutes=random.randint(0, 59))).strftime("%H:%M:%S")
    end_time = (datetime.strptime(start_time, "%H:%M:%S") + timedelta(minutes=10)).strftime("%H:%M:%S")

    logger.info(f"Filling new row with Start={start_time}, End={end_time}, Flag=Y (Executable Time skipped)")

    def fill_cell_and_validate(cell, value):
        """Click cell, wait for edit control, set text, and validate it."""
        for attempt in range(1, 4):
            try:
                cell.click_input()
                cell.double_click_input()
                time.sleep(0.3)

                edit = app.window(control_type="Edit")
                if not edit.exists(timeout=2):
                    send_keys("{F2}")
                    edit.wait("exists ready", timeout=2)

                edit.set_focus()
                edit.set_edit_text(value)
                logger.info(f"Filled '{value}' (attempt {attempt})")
                send_keys("{TAB}")
                time.sleep(0.5)

                # --- Validation ---
                current_text = cell.window_text().strip()
                if current_text == value:
                    logger.info(f"Validation passed: '{value}' correctly set.")
                    return
                else:
                    logger.warning(f"Validation failed: expected '{value}', got '{current_text}'. Retrying...")

            except Exception as e:
                logger.warning(f"Attempt {attempt} failed for value '{value}': {e}")

            time.sleep(0.5)

        raise TimeoutError(f"Failed to set and validate cell value '{value}' after 3 attempts")

    try:
        fill_cell_and_validate(last_row_cells[0], start_time)  # Start Time
        fill_cell_and_validate(last_row_cells[1], end_time)    # End Time
        # Skipping Executable Time intentionally
        fill_cell_and_validate(last_row_cells[3], "Y")         # Flag
    except Exception as e:
        logger.error(f"Row filling failed: {e}")
        raise

    safe_click(peak_margin_win, title="Save", control_type="Button")
    time.sleep(2)
    logger.info("Row filled, validated, and saved successfully.")
