def handle_post_login_popups(app, timeout=15):
    logger.info("Checking for post-login popups...")
    start_time = time.time()

    while time.time() - start_time < timeout:
        try:
            popup = app.window(title_re=".*")
            if popup.exists(timeout=1) and popup.is_visible():
                popup_text = popup.window_text().strip()
                logger.info(f"Post-login popup detected: '{popup_text}'")

                # Dump all available buttons with their automation IDs for debug
                try:
                    for btn in popup.children(control_type="Button"):
                        logger.info(f"Found button: '{btn.window_text()}' AutomationId={btn.automation_id()}")
                except Exception as e:
                    logger.warning(f"Unable to list popup buttons: {e}")

                # --- Handle "Do you want to close the RMS ?" popup (Click NO by AutomationId) ---
                if "do you want to close the rms" in popup_text.lower():
                    try:
                        no_btn = popup.child_window(auto_id="7", control_type="Button")  # example AutomationId
                        if no_btn.exists():
                            no_btn.click_input()
                            logger.info("Clicked NO (AutomationId=7) on 'Do you want to close the RMS ?' popup.")
                            time.sleep(1)
                            continue
                    except Exception as e:
                        logger.error(f"Failed to click NO by AutomationId: {e}")

                # --- Handle "BMS OpmsEngine Got abandoned at Primary" popup (Click OK by AutomationId) ---
                if "bms opmsengine got abandoned" in popup_text.lower():
                    try:
                        ok_btn = popup.child_window(auto_id="6", control_type="Button")  # example AutomationId
                        if ok_btn.exists():
                            ok_btn.click_input()
                            logger.info("Clicked OK (AutomationId=6) on 'BMS OpmsEngine Got abandoned at Primary' popup.")
                            time.sleep(1)
                            continue
                    except Exception as e:
                        logger.error(f"Failed to click OK by AutomationId: {e}")

                # --- Generic fallback: click first available button ---
                try:
                    first_btn = popup.child_window(control_type="Button")
                    if first_btn.exists():
                        first_btn.click_input()
                        logger.info(f"Clicked fallback button '{first_btn.window_text()}' AutomationId={first_btn.automation_id()}")
                        time.sleep(1)
                        continue
                except Exception:
                    pass
            else:
                time.sleep(0.5)

        except Exception:
            time.sleep(0.5)
