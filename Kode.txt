import time
import os
import logging
from datetime import datetime
from pywinauto.application import Application
from pywinauto.timings import TimeoutError

# ---------------- Logging Setup ----------------
script_name = os.path.splitext(os.path.basename(__file__))[0]
log_dir = os.path.join(os.getcwd(), "logs")
os.makedirs(log_dir, exist_ok=True)

timestamp = datetime.now().strftime("%Y-%m-%d_%H%M%S")
log_file = os.path.join(log_dir, f"{script_name}_{timestamp}.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_file, mode="w", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# ---------------- Helper Functions ----------------
def safe_type(window, auto_id, control_type, text, retries=5, delay=2):
    """Retry typing text into a control until success or retries exhausted."""
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).type_keys(text, with_spaces=True)
            logger.info(f"Typed '{text}' into {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to type into {auto_id} after {retries} attempts")


def safe_select(window, auto_id, control_type, value, retries=5, delay=2):
    """Retry selecting a value in a ComboBox until success or retries exhausted."""
    for attempt in range(1, retries + 1):
        try:
            ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            ctrl.wait("enabled", timeout=5).select(value)
            logger.info(f"Selected '{value}' in {auto_id} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to select {value} in {auto_id} after {retries} attempts")


def safe_click(window, auto_id=None, title=None, control_type="Button", retries=5, delay=2):
    """Retry clicking a button until success or retries exhausted."""
    for attempt in range(1, retries + 1):
        try:
            if auto_id:
                ctrl = window.child_window(auto_id=auto_id, control_type=control_type)
            else:
                ctrl = window.child_window(title=title, control_type=control_type)

            ctrl.wait("enabled", timeout=5).click_input()
            logger.info(f"Clicked {auto_id or title} (attempt {attempt})")
            return True
        except Exception as e:
            logger.warning(f"Attempt {attempt} failed for {auto_id or title}: {e}")
            time.sleep(delay)
    raise TimeoutError(f"Failed to click {auto_id or title} after {retries} attempts")


def check_and_handle_popups(app, timeout=10):
    """Check for and handle specific popups after login."""
    logger.info("Checking for popups after login...")
    
    try:
        # Method 1: Check for any popup with "Intra DLyMGN" in title
        try:
            popups = app.windows()
            for popup in popups:
                if popup.is_visible() and "Intra DLyMGN" in popup.window_text():
                    logger.info(f"Found popup: {popup.window_text()}")
                    # Try to find and click OK button using multiple approaches
                    try:
                        # Method 1: Look for OK button by title
                        ok_button = popup.child_window(title="OK", control_type="Button")
                        ok_button.wait("enabled", timeout=5).click_input()
                        logger.info("Clicked OK button using title")
                        time.sleep(2)
                        break
                    except:
                        try:
                            # Method 2: Look for OK button by auto_id if available
                            ok_button = popup.child_window(auto_id="btnOK", control_type="Button")
                            ok_button.wait("enabled", timeout=5).click_input()
                            logger.info("Clicked OK button using auto_id")
                            time.sleep(2)
                            break
                        except:
                            try:
                                # Method 3: Look for any button that might be OK
                                buttons = popup.descendants(control_type="Button")
                                for button in buttons:
                                    if button.is_visible() and button.window_text().upper() in ["OK", "YES", "NO"]:
                                        button.click_input()
                                        logger.info(f"Clicked button: {button.window_text()}")
                                        time.sleep(2)
                                        break
                                break
                            except Exception as e:
                                logger.warning(f"Could not click button: {e}")
        except Exception as e:
            logger.warning(f"Error checking for Intra DLyMGN popup: {e}")

        # Method 2: Check for "Do you want to close the RMS?" popup
        try:
            popups = app.windows()
            for popup in popups:
                if popup.is_visible() and "close the RMS" in popup.window_text().lower():
                    logger.info(f"Found close RMS popup: {popup.window_text()}")
                    # Click No button
                    try:
                        no_button = popup.child_window(title="No", control_type="Button")
                        no_button.wait("enabled", timeout=5).click_input()
                        logger.info("Clicked No button")
                        time.sleep(2)
                        break
                    except:
                        try:
                            # Try to find No button by other means
                            buttons = popup.descendants(control_type="Button")
                            for button in buttons:
                                if button.is_visible() and button.window_text().upper() == "NO":
                                    button.click_input()
                                    logger.info("Clicked No button (alternative method)")
                                    time.sleep(2)
                                    break
                            break
                        except Exception as e:
                            logger.warning(f"Could not click No button: {e}")
        except Exception as e:
            logger.warning(f"Error checking for close RMS popup: {e}")

        # Method 3: Check for any generic popup with OK button
        try:
            time.sleep(3)  # Wait a bit for popups to appear
            dialogs = app.windows(visible_only=True)
            for dialog in dialogs:
                if dialog != app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*") and dialog.is_dialog():
                    logger.info(f"Found dialog: {dialog.window_text()}")
                    try:
                        # Try to click OK if available
                        ok_buttons = dialog.descendants(control_type="Button")
                        for btn in ok_buttons:
                            if btn.is_visible() and btn.window_text().upper() == "OK":
                                btn.click_input()
                                logger.info("Clicked OK on generic popup")
                                time.sleep(2)
                                break
                    except Exception as e:
                        logger.warning(f"Could not handle generic popup: {e}")
        except Exception as e:
            logger.warning(f"Error checking for generic popups: {e}")
            
    except Exception as e:
        logger.warning(f"Error in popup handling: {e}")


def check_rms_running(main_win, timeout=30):
    """Check if RMS is running by looking for the status text."""
    logger.info("Checking if RMS is running...")
    
    for attempt in range(1, 6):
        try:
            # Look for the RMS Running status text with flexible matching
            status_elements = main_win.descendants(control_type="Text")
            for element in status_elements:
                if element.is_visible() and "RMS Running" in element.window_text():
                    status = element.window_text()
                    logger.info(f"RMS Status: {status}")
                    
                    if "RMS Running" in status:
                        logger.info("âœ“ RMS is running successfully")
                        return True
            
            logger.warning(f"Attempt {attempt}: RMS status not found, waiting...")
            time.sleep(5)
                
        except Exception as e:
            logger.warning(f"Attempt {attempt} to find RMS status failed: {e}")
            time.sleep(5)
    
    logger.error("RMS does not appear to be running based on status check")
    return False


def navigate_to_peak_margin(main_win):
    """Navigate to RMS Configuration -> Peak Margin."""
    logger.info("Navigating to Peak Margin...")
    
    try:
        # Click on RMS Configuration menu
        safe_click(main_win, title="RMS Configuration", control_type="MenuItem")
        logger.info("Clicked RMS Configuration menu")
        time.sleep(3)  # Wait for menu to expand
        
        # Click on Peak Margin submenu - use multiple approaches
        try:
            # Method 1: Direct click on Peak Margin menu item
            peak_margin_item = main_win.child_window(title="Peak Margin", control_type="MenuItem")
            peak_margin_item.wait("visible", timeout=10)
            peak_margin_item.click_input()
            logger.info("Clicked Peak Margin submenu (direct)")
        except:
            # Method 2: Use coordinates if direct click fails
            config_menu = main_win.child_window(title="RMS Configuration", control_type="MenuItem")
            rect = config_menu.rectangle()
            # Click slightly below the menu to open submenu
            main_win.click_input(coords=(rect.left + 10, rect.bottom + 5))
            time.sleep(1)
            # Now try to find and click Peak Margin
            peak_margin_item = main_win.child_window(title="Peak Margin", control_type="MenuItem")
            peak_margin_item.click_input()
            logger.info("Clicked Peak Margin submenu (coordinates)")
        
        # Wait for Peak Margin window to open
        time.sleep(5)
        peak_margin_windows = app.windows(title="Peak Margin")
        if peak_margin_windows:
            logger.info("Peak Margin window opened successfully")
            return True
        else:
            logger.warning("Peak Margin window not found, but navigation attempted")
            return False
            
    except Exception as e:
        logger.error(f"Failed to navigate to Peak Margin: {e}")
        return False


# ---------------- Main Script ----------------
try:
    logger.info("Starting RMS Application...")
    app = Application(backend="uia").start(
        r"D:\Program Files (x86)\NCCL Ltd\RMSSetup\RMS FE.exe"
    )

    # Wait for Login window
    dlg = app.window(title_re=".*Risk Management System - Login")
    dlg.wait("visible", timeout=30)
    logger.info("Login window found.")

    # Fill login fields with retries
    safe_type(dlg, "txt_UserId", "Edit", "QA1")
    safe_type(dlg, "txt_Password", "Edit", "change@1212")
    safe_select(dlg, "cmb_Envionrnment", "ComboBox", "UAT")
    safe_select(dlg, "cmb_loginMethod", "ComboBox", "RMS")

    # Click Submit
    safe_click(dlg, auto_id="btn_Submit", control_type="Button")
    logger.info("Clicked Submit.")
    time.sleep(5)  # Wait for login process

    # Handle login popup (Yes/No) with retry
    try:
        popup = app.window(title_re=".*")
        popup.wait("visible", timeout=15)
        safe_click(popup, title="Yes", control_type="Button")
        logger.info("Clicked Yes on environment popup.")
        time.sleep(3)
    except TimeoutError:
        logger.warning("No login popup appeared.")

    # Wait for Main Window
    main_win = app.window(title_re=".*NCDEX RISK MANAGEMENT SYSTEM.*")
    main_win.wait("visible", timeout=40)
    logger.info("Main RMS window is loaded")
    time.sleep(5)  # Wait for main window to stabilize

    # Handle specific popups after login
    check_and_handle_popups(app)
    
    # Check if RMS is running
    if not check_rms_running(main_win):
        logger.error("RMS is not running. Exiting automation.")
        raise Exception("RMS is not running")
    
    # Navigate to RMS Configuration -> Peak Margin
    if navigate_to_peak_margin(main_win):
        logger.info("Successfully navigated to Peak Margin")
        time.sleep(5)  # Wait for Peak Margin window to fully load
    else:
        logger.error("Failed to navigate to Peak Margin")
        raise Exception("Navigation to Peak Margin failed")

    # -------- EXIT FLOW --------
    # Click Exit menu item
    safe_click(main_win, title="Exit", control_type="MenuItem")
    logger.info("Clicked Exit menu item.")
    time.sleep(2)

    # Handle Exit confirmation popup
    try:
        exit_popup = app.window(title_re=".*")
        exit_popup.wait("visible", timeout=15)
        safe_click(exit_popup, title="Yes", control_type="Button")
        logger.info("Clicked Yes on Exit confirmation popup")
    except TimeoutError:
        logger.warning("No exit confirmation popup appeared.")

    logger.info("Automation script completed successfully.")

except Exception as e:
    logger.exception(f"Automation failed: {e}")
