def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=20, poll_interval=1):
    """
    Find row with given Start Time & PENDING status, tick checkbox,
    click PENDING cell, open dropdown and select REJECT.
    """
    logger.info(f"Looking for Peak Margin panel for rash1 to reject Start Time={target_start_time}...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    end_time = time.time() + max_wait_seconds
    last_exception = None

    while time.time() < end_time:
        try:
            rows = dump_peak_margin_grid(peak_margin_win)

            for r_idx, (row_cells, row_values) in enumerate(rows):
                if len(row_values) < 6:
                    continue

                start_time_val = row_values[1]
                status_val = row_values[5]

                if start_time_val == target_start_time and status_val.upper() == "PENDING":
                    logger.info(f"‚úÖ Matched row {r_idx} with Start Time={start_time_val}, Status={status_val}")

                    # 1Ô∏è‚É£ Click the checkbox
                    checkbox_cell = row_cells[-1]
                    if checkbox_cell.rectangle().width() > 0:
                        checkbox_cell.click_input()
                        logger.info("‚òëÔ∏è Selected checkbox.")
                    else:
                        logger.error("Checkbox cell not clickable ‚Äî aborting.")
                        raise RuntimeError("Checkbox cell has invalid rectangle.")
                    time.sleep(0.5)

                    # 2Ô∏è‚É£ Re-locate Status cell (column 5) dynamically
                    try:
                        status_cell = row_cells[5]
                        rect = status_cell.rectangle()
                        if rect.width() > 0:
                            status_cell.click_input()
                            logger.info("üñ±Ô∏è Clicked Status cell (PENDING).")
                        else:
                            raise RuntimeError("Status cell rectangle invalid.")
                    except Exception as e:
                        logger.warning(f"Direct click failed: {e}, using mouse fallback.")
                        rect = row_cells[5].rectangle()
                        x = rect.left + rect.width() // 2
                        y = rect.top + rect.height() // 2
                        from pywinauto.mouse import move, click
                        move(coords=(x, y))
                        click(coords=(x, y))
                        logger.info("üñ±Ô∏è Clicked Status cell via manual coords.")
                    time.sleep(1.0)  # Increased delay for UI to render combo box

                    # 3Ô∏è‚É£ Locate and interact with the dropdown
                    try:
                        # Broader search for combo box in top window
                        combo_boxes = app.top_window().descendants(control_type="ComboBox")
                        if not combo_boxes:
                            logger.error("No combo boxes found in top window.")
                            raise RuntimeError("No combo box found after clicking status cell.")
                        combo_box = combo_boxes[0]  # Assume first combo box is the editing control
                        combo_box.wait("visible enabled", timeout=8)
                        logger.info(f"Located editing combo box: {combo_box.window_text()}")

                        # Log combo box state for debugging
                        logger.info(f"Combo box focused: {combo_box.has_keyboard_focus()}, expanded: {combo_box.is_expanded()}")

                        # Expand the dropdown
                        combo_box.expand()
                        time.sleep(0.5)  # Increased delay for dropdown to render

                        # Locate the dropdown list and REJECT item
                        dropdown_list = combo_box.child_window(control_type="List")
                        reject_item = dropdown_list.child_window(title="REJECT", control_type="ListItem")
                        reject_item.wait("visible", timeout=5)
                        logger.info("Found REJECT list item.")

                        # Log available list items for debugging
                        list_items = dropdown_list.descendants(control_type="ListItem")
                        logger.info(f"Dropdown items: {[item.window_text() for item in list_items]}")

                        # Select the REJECT item
                        reject_item.select()
                        logger.info("Selected REJECT list item.")
                        time.sleep(0.5)

                        # Commit the change (try ENTER first, then fallback to clicking another cell)
                        send_keys("{ENTER}")
                        time.sleep(0.5)
                        # Verify if status changed; if not, try clicking another cell
                        updated_rows = dump_peak_margin_grid(peak_margin_win)
                        if updated_rows[r_idx][1][5].upper() != "REJECT":
                            logger.warning("ENTER did not commit REJECT; trying cell click.")
                            row_cells[0].click_input()  # Click first cell to commit
                            time.sleep(0.5)
                    except Exception as e:
                        logger.error(f"Failed to interact with dropdown: {e}")
                        # Log all combo boxes for debugging
                        logger.info(f"Available combo boxes: {[cb.window_text() for cb in combo_boxes]}")
                        raise RuntimeError(f"Could not select REJECT in dropdown: {e}")

                    # 4Ô∏è‚É£ Click Save
                    safe_click(peak_margin_win, title="Save", control_type="Button")
                    logger.info("üíæ Clicked Save.")
                    time.sleep(1.5)

                    # 5Ô∏è‚É£ Handle popup
                    try:
                        popup = app.window(best_match="Risk Management System")
                        popup.wait("visible", timeout=8)
                        safe_click(popup, auto_id="2", control_type="Button")
                        logger.info("Clicked OK on confirmation popup.")
                    except Exception:
                        logger.warning("No confirmation popup after save.")

                    return

            time.sleep(poll_interval)

        except Exception as e:
            last_exception = e
            time.sleep(poll_interval)

    msg = f"No row found with Start Time={target_start_time} & Status=PENDING within {max_wait_seconds}s"
    logger.error(msg)
    if last_exception:
        logger.debug(f"Last exception: {last_exception}")
    raise RuntimeError(msg)
