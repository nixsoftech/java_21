def dump_peak_margin_complete(peak_margin_win):
    """Collect all relevant data from Peak Margin window for debugging and automation."""
    tables = peak_margin_win.descendants(control_type="Table") + peak_margin_win.descendants(control_type="List")
    if not tables:
        logger.warning("No tables/list views found in Peak Margin window")
        return []

    grid = tables[0]
    all_data_items = grid.descendants(control_type="DataItem")

    # Attempt to detect columns dynamically
    columns_per_row = 9 if len(all_data_items) >= 9 else len(all_data_items)
    rows_cells = [all_data_items[i:i + columns_per_row] for i in range(0, len(all_data_items), columns_per_row)]

    rows = []

    for r_idx, row_cells in enumerate(rows_cells):
        row_info = []
        logger.info(f"--- Row {r_idx} ---")
        for c_idx, cell in enumerate(row_cells):
            cell_text = ""
            patterns = []

            try:
                cell_text = cell.window_text()
            except Exception:
                pass

            # List children of the cell (to see if combo boxes, checkboxes exist)
            try:
                children = cell.descendants()
                for child in children:
                    child_info = {
                        "Name": child.element_info.name,
                        "ControlType": child.element_info.control_type,
                        "AutomationId": child.element_info.automation_id,
                        "ClassName": child.element_info.class_name,
                        "Value": getattr(child, "get_value", lambda: "")() if hasattr(child, "get_value") else "",
                        "LegacyValue": child.legacy_properties().get("Value", "")
                    }
                    patterns.append(child_info)
            except Exception:
                pass

            logger.info(f"Cell {c_idx}: Text='{cell_text}' Children={patterns}")
            row_info.append({"cell": cell, "text": cell_text, "children": patterns})

        rows.append(row_info)

    logger.info(f"Total rows collected: {len(rows)}")
    return rows
