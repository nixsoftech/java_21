def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=20, poll_interval=1):
    logger.info(f"Looking for Peak Margin panel for rash1 to reject start_time={target_start_time}...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    end_time = time.time() + max_wait_seconds
    found = False
    last_exception = None

    while time.time() < end_time:
        try:
            tables = peak_margin_win.descendants(control_type="Table") + peak_margin_win.descendants(control_type="List")
            if not tables:
                time.sleep(poll_interval)
                continue
            grid = tables[0]

            # Get both cell objects and their values
            all_data_items = grid.descendants(control_type="DataItem")
            columns_per_row = 9
            rows_cells = [all_data_items[i:i + columns_per_row] for i in range(0, len(all_data_items), columns_per_row)]

            rows = []
            for row_cells in rows_cells:
                row_values = []
                for cell in row_cells:
                    try:
                        val = getattr(cell.legacy_properties, 'get', lambda k, d='': cell.window_text())('Value', '')
                    except Exception:
                        val = cell.window_text()
                    row_values.append(val)
                rows.append((row_cells, row_values))

            logger.info(f"Dumping {len(rows)} rows from Peak Margin grid:")
            for r_idx, (_, row_values) in enumerate(rows):
                logger.info(f"Row {r_idx}: {row_values}")

            # Scan rows for target Start Time
            for r_idx, (row_cells, row_values) in enumerate(rows):
                start_cell_text = row_values[1].strip()
                if start_cell_text == target_start_time:
                    logger.info(f"Matched row {r_idx} with Start Time '{start_cell_text}'")

                    # Click Edit checkbox (last column)
                    row_cells[8].click_input()
                    time.sleep(0.3)

                    # Open status dropdown and select REJECT
                    status_cell = row_cells[5]
                    status_cell.click_input()
                    time.sleep(0.2)
                    send_keys("{F2}")
                    time.sleep(0.2)
                    send_keys("{DOWN}{ENTER}")
                    logger.info("Selected REJECT in status dropdown.")

                    # Save changes
                    safe_click(peak_margin_win, title="Save", control_type="Button")
                    time.sleep(1.5)

                    # Handle confirmation popup
                    try:
                        popup = app.window(best_match="Risk Management System")
                        popup.wait("visible", timeout=8)
                        safe_click(popup, auto_id="2", control_type="Button")
                        logger.info("Clicked OK on confirmation popup.")
                    except Exception:
                        logger.warning("No confirmation popup after save.")

                    found = True
                    return

            time.sleep(poll_interval)
        except Exception as e:
            last_exception = e
            time.sleep(poll_interval)

    msg = f"No row found with Start Time = {target_start_time} within {max_wait_seconds}s"
    logger.error(msg)
    if last_exception:
        logger.debug(f"Last exception: {last_exception}")
    raise RuntimeError(msg)
