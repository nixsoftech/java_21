def handle_peak_margin(app, main_win):
    logger.info("Looking for Peak Margin panel inside main window...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    logger.info("Peak Margin panel detected. Clicking Add...")
    safe_click(peak_margin_win, title="Add", control_type="Button")
    time.sleep(1)

    grid = peak_margin_win.child_window(control_type="Table")
    grid.wait("exists ready", timeout=10)

    all_data_items = grid.descendants(control_type="DataItem")
    if not all_data_items:
        raise RuntimeError("No data cells found in grid after clicking Add")

    logger.info(f"Detected {len(all_data_items)} data cells in grid.")
    columns_per_row = 4
    rows = [all_data_items[i:i + columns_per_row] for i in range(0, len(all_data_items), columns_per_row)]
    last_row_cells = rows[-1]
    logger.info(f"Selected last row with {len(last_row_cells)} cells.")

    now = datetime.now()
    start_time = (datetime.combine(now.date(), datetime.min.time()) + timedelta(hours=17, minutes=random.randint(0, 59))).strftime("%H:%M:%S")
    end_time = (datetime.strptime(start_time, "%H:%M:%S") + timedelta(minutes=10)).strftime("%H:%M:%S")
    exec_time = start_time

    logger.info(f"Filling new row with Start={start_time}, End={end_time}, Exec={exec_time}")

    def fill_cell(cell, value):
        try:
            cell.click_input()
            cell.double_click_input()
            time.sleep(0.2)

            # Force edit mode if necessary
            edit = app.window(control_type="Edit")
            if not edit.exists(timeout=1):
                logger.debug("Edit control not found after double click, sending F2 to force edit mode")
                send_keys("{F2}")
                edit.wait("exists ready", timeout=2)

            edit.set_focus()
            edit.type_keys("^a{BACKSPACE}")  # clear any existing value
            edit.type_keys(value, with_spaces=True)
            logger.info(f"Filled value '{value}' in cell")
            send_keys("{TAB}")
            time.sleep(0.3)

        except Exception as e:
            logger.error(f"Failed to fill cell with value {value}: {e}")
            raise

    try:
        fill_cell(last_row_cells[0], start_time)
        fill_cell(last_row_cells[1], end_time)
        fill_cell(last_row_cells[2], exec_time)
        fill_cell(last_row_cells[3], "Y")
    except Exception as e:
        logger.error(f"Row filling failed: {e}")
        raise

    safe_click(peak_margin_win, title="Save", control_type="Button")
    logger.info("Row filled and saved successfully.")
