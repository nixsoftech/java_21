from pywinauto.keyboard import send_keys

def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=20, poll_interval=1):
    logger.info(f"Looking for Peak Margin panel for rash1 to reject start_time={target_start_time}...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    end_time = time.time() + max_wait_seconds
    last_exception = None

    while time.time() < end_time:
        try:
            rows = dump_peak_margin_grid(peak_margin_win)
            for r_idx, (row_cells, row_values) in enumerate(rows):
                if len(row_values) < 6:
                    continue

                start_time_val = row_values[1]
                status_val = row_values[5]

                if start_time_val == target_start_time and status_val.upper() == "PENDING":
                    logger.info(f"✅ Matched row {r_idx} with Start Time={start_time_val}, Status={status_val}")

                    # 1. Select edit checkbox
                    row_cells[-1].click_input()
                    time.sleep(0.5)

                    # 2. Click Status cell to activate combo box
                    status_cell = row_cells[5]
                    status_cell.click_input()
                    time.sleep(0.3)

                    # 3. Expand combo box with keyboard to ensure list is open
                    send_keys("%{DOWN}")  # Alt+Down
                    time.sleep(0.5)

                    # 4. Locate combo list and log items
                    try:
                        combo_list = peak_margin_win.child_window(control_type="List", title="Editing Control")
                        combo_list.wait("visible", timeout=5)

                        all_items = combo_list.children(control_type="ListItem")
                        logger.info(f"Found {len(all_items)} items in combo:")
                        for i, itm in enumerate(all_items):
                            logger.info(f"   {i+1}) {itm.window_text()}")

                        reject_item = combo_list.child_window(title="REJECT", control_type="ListItem")
                        reject_item.wait("enabled", timeout=5)
                        reject_item.double_click_input()
                        logger.info("✅ Selected 'REJECT' via double click.")
                    except Exception as e:
                        logger.error(f"Failed to directly double-click REJECT: {e}")
                        logger.info("Fallback: using DOWN + ENTER to select REJECT")
                        send_keys("{DOWN}{ENTER}")

                    time.sleep(0.5)

                    # 5. Click Save
                    safe_click(peak_margin_win, title="Save", control_type="Button")
                    logger.info("Clicked Save after selecting REJECT.")
                    time.sleep(1)

                    # 6. Handle popup
                    try:
                        popup = app.window(best_match="Risk Management System")
                        popup.wait("visible", timeout=10)
                        safe_click(popup, auto_id="2", control_type="Button")
                        logger.info("Clicked OK on 'Data Reject successfully' popup.")
                    except Exception as e:
                        logger.error(f"Failed to handle success popup: {e}")

                    return  # Done
            time.sleep(poll_interval)
        except Exception as e:
            last_exception = e
            time.sleep(poll_interval)

    msg = f"No row found with Start Time={target_start_time} & Status=PENDING within {max_wait_seconds}s"
    logger.error(msg)
    if last_exception:
        logger.debug(f"Last exception: {last_exception}")
    raise RuntimeError(msg)
