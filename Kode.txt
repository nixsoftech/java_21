def handle_peak_margin_reject_for_rash1(app, peak_margin_win, stored_start_time):
    """
    Handles rejecting a Peak Margin entry for rash1 user.
    It matches the row with stored_start_time, selects the checkbox,
    opens the Status dropdown, selects 'REJECT', and saves.
    """
    import time
    from pywinauto.keyboard import send_keys
    from pywinauto.timings import TimeoutError

    logger.info(f"Looking for Peak Margin panel for rash1 to reject start_time={stored_start_time}...")

    # Step 1: Use dump_peak_margin_grid to get all rows
    all_rows = dump_peak_margin_grid(peak_margin_win)
    logger.info(f"Dumping {len(all_rows)} rows from Peak Margin grid:")

    matched_index = None
    for idx, row in enumerate(all_rows):
        logger.info(f"Row {idx}: {row}")
        if len(row) >= 6 and row[1] == stored_start_time and row[5].upper() == "PENDING":
            matched_index = idx
            logger.info(f"✅ Matched row {idx} with Start Time={row[1]}, Status={row[5]}")
            break

    if matched_index is None:
        logger.error(f"❌ No row found with Start Time={stored_start_time}")
        return

    # Step 2: Get actual UI row element
    grid = peak_margin_win.child_window(control_type="Table")
    rows = grid.children(control_type="DataItem")
    if matched_index >= len(rows):
        logger.error(f"Matched index {matched_index} is out of UI row range.")
        return

    matched_row = rows[matched_index]
    cells = matched_row.children()

    # Step 3: Select edit checkbox
    try:
        checkbox = cells[-1]
        checkbox.click_input()
        time.sleep(0.2)
        logger.info("✅ Clicked edit checkbox for matched row.")
    except Exception as e:
        logger.error(f"Failed to click checkbox: {e}")
        return

    # Step 4: Focus status cell and enter edit mode
    try:
        status_cell = cells[5]
        status_cell.click_input()
        time.sleep(0.3)
        status_cell.double_click_input()  # Ensure we are in edit mode
        time.sleep(0.3)
        send_keys("%{DOWN}")  # Expand dropdown
        time.sleep(0.5)
    except Exception as e:
        logger.error(f"Failed to activate status cell: {e}")
        return

    # Step 5: Select "REJECT"
    try:
        editing_combo = peak_margin_win.child_window(control_type="ComboBox", title="Editing Control")
        editing_combo.wait("visible", timeout=3)
        reject_item = editing_combo.child_window(title="REJECT", control_type="ListItem")
        reject_item.wait("visible", timeout=3)
        reject_item.double_click_input()
        logger.info("✅ Selected REJECT from dropdown.")
    except TimeoutError:
        logger.warning("Failed to select REJECT directly: timed out. Fallback using keyboard navigation.")
        send_keys("{DOWN}{ENTER}")

    send_keys("{TAB}")  # Commit change
    time.sleep(0.3)

    # Step 6: Click Save
    try:
        save_btn = peak_margin_win.child_window(title="Save", control_type="Button")
        save_btn.click_input()
        logger.info("Clicked Save after selecting REJECT.")
    except Exception as e:
        logger.error(f"Could not click Save: {e}")
