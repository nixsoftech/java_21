# ------------------- Peak Margin Dump -------------------
def dump_peak_margin_grid(peak_margin_win):
    tables = peak_margin_win.descendants(control_type="Table") + peak_margin_win.descendants(control_type="List")
    if not tables:
        logger.warning("No tables/list views found in Peak Margin window for dumping")
        return []

    grid = tables[0]
    all_data_items = grid.descendants(control_type="DataItem")
    columns_per_row = 9
    rows_cells = [all_data_items[i:i + columns_per_row] for i in range(0, len(all_data_items), columns_per_row)]

    rows = []
    logger.info(f"Dumping {len(rows_cells)} rows from Peak Margin grid:")
    for r_idx, row_cells in enumerate(rows_cells):
        row_values = []
        for c_idx, cell in enumerate(row_cells):
            try:
                val = cell.legacy_properties().get("Value", "")
            except Exception:
                try:
                    val = cell.get_value()
                except Exception:
                    val = cell.window_text()

            val = val.strip() if val else ""
            row_values.append(val)

            # 🔎 EXTRA LOGGING: Show ControlType + Value + Rectangle for debugging
            try:
                rect = cell.rectangle()
                logger.debug(
                    f"Row {r_idx}, Col {c_idx}: "
                    f"ControlType={cell.friendly_class_name()}, "
                    f"Value='{val}', "
                    f"Bounds=({rect.left},{rect.top},{rect.right},{rect.bottom})"
                )
            except Exception:
                logger.debug(f"Row {r_idx}, Col {c_idx}: ControlType={cell.friendly_class_name()}, Value='{val}'")

        logger.info(f"Row {r_idx}: {row_values}")
        rows.append((row_cells, row_values))

    return rows


# ------------------- Peak Margin Reject (rash1) -------------------

def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=20, poll_interval=1):
    logger.info(f"Looking for Peak Margin panel for rash1 to reject Start Time={target_start_time}...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    end_time = time.time() + max_wait_seconds

    while time.time() < end_time:
        rows = dump_peak_margin_grid(peak_margin_win)

        for r_idx, (row_cells, row_values) in enumerate(rows):
            if len(row_values) < 6:
                continue

            start_time_val = row_values[1]
            status_val = row_values[5]

            if start_time_val == target_start_time and status_val.upper() == "PENDING":
                logger.info(f"✅ Found row {r_idx}: Start={start_time_val}, Status={status_val}")

                # Step 1: Select checkbox
                checkbox_cell = row_cells[-1]
                checkbox_cell.click_input()
                logger.info("☑️ Checkbox selected.")
                time.sleep(1)  # Give grid time to register selection

                # Step 2: Double-click PENDING cell (programmatic)
                pending_cell = row_cells[5]
                logger.info(f"🖱️ About to double-click PENDING cell: ControlType={pending_cell.friendly_class_name()}, "
                            f"Value={pending_cell.legacy_properties().get('Value', '')}")
                pending_cell.double_click_input()
                logger.info("🖱️ Double-clicked on PENDING cell to open dropdown.")
                time.sleep(0.5)

                # Step 3: Open dropdown and choose REJECT
                send_keys("%{DOWN}")  # Alt+Down to open combo
                time.sleep(0.3)
                send_keys("REJECT{ENTER}")
                logger.info("✅ Selected REJECT via keyboard.")
                time.sleep(0.5)

                # Step 4: Save changes
                safe_click(peak_margin_win, title="Save", control_type="Button")
                logger.info("💾 Clicked Save button.")
                time.sleep(1)

                # Step 5: Handle confirmation popup
                try:
                    popup = app.window(best_match="Risk Management System")
                    popup.wait("visible", timeout=5)
                    safe_click(popup, auto_id="2", control_type="Button")
                    logger.info("Clicked OK on confirmation popup.")
                except Exception:
                    logger.warning("No confirmation popup after save.")

                return  # ✅ Success

        logger.debug("Row not matched yet, retrying...")
        time.sleep(poll_interval)

    raise RuntimeError(f"No row found with Start Time={target_start_time} & Status=PENDING within {max_wait_seconds}s")
