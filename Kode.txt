def handle_peak_margin(app, main_win):
    logger.info("Looking for Peak Margin panel inside main window...")

    try:
        peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
        peak_margin_win.wait("visible", timeout=10)
        logger.info("Peak Margin panel detected and ready.")
    except TimeoutError:
        logger.error("Peak Margin panel not found. Dumping children for debugging...")
        logger.error(main_win.print_control_identifiers())
        raise

    # ---- Click Add ----
    safe_click(peak_margin_win, title="Add", control_type="Button")
    time.sleep(1)

    # ---- Get all rows ----
    grid = peak_margin_win.child_window(control_type="Table")
    grid.wait("exists", timeout=10)
    rows = grid.children(control_type="DataItem")
    if not rows:
        logger.error("No rows detected in Peak Margin grid!")
        return

    last_row = rows[-1]
    last_row_value = last_row.legacy_properties().get("Value", "")
    logger.info(f"Last row legacy value: {last_row_value}")

    # ---- Check if it's a new row ----
    if "(null)" not in last_row_value:
        logger.warning("Last row already has data, skipping adding new row.")
        return

    # ---- Fill columns ----
    now = datetime.now()
    start_time = (datetime.combine(now.date(), datetime.min.time()) + timedelta(hours=17) +
                  timedelta(minutes=random.randint(0, 59))).strftime("%H:%M:%S")
    end_time = (datetime.strptime(start_time, "%H:%M:%S") + timedelta(minutes=10)).strftime("%H:%M:%S")
    exec_time = start_time

    logger.info(f"Filling last row with Start={start_time}, End={end_time}")

    # Target individual cells by title
    try:
        start_cell = last_row.child_window(title_re="Start Time.*", control_type="DataItem")
        start_cell.double_click_input()
        start_cell.type_keys(start_time, with_spaces=True)

        end_cell = last_row.child_window(title_re="End Time.*", control_type="DataItem")
        end_cell.double_click_input()
        end_cell.type_keys(end_time, with_spaces=True)

        exec_cell = last_row.child_window(title_re="Executable Time.*", control_type="DataItem")
        exec_cell.double_click_input()
        exec_cell.type_keys(exec_time, with_spaces=True)

        flag_cell = last_row.child_window(title_re="Flag.*", control_type="DataItem")
        flag_cell.double_click_input()
        flag_cell.type_keys("Y")

    except Exception as e:
        logger.error(f"Failed to fill row cells: {e}")
        return

    # ---- Save ----
    safe_click(peak_margin_win, title="Save", control_type="Button")
    time.sleep(3)

    # ---- Verify status ----
    status_cell = last_row.child_window(title_re="Status.*", control_type="DataItem")
    status_text = status_cell.window_text().strip()
    if "PENDING" in status_text.upper():
        logger.info(f"Status verification PASSED: {status_text}")
    else:
        logger.warning(f"Status verification FAILED: Status is '{status_text}'")
