from pywinauto.mouse import move, double_click

def handle_peak_margin_reject_for_rash1(app, main_win, target_start_time, max_wait_seconds=20, poll_interval=1):
    logger.info(f"Looking for Peak Margin panel for rash1 to reject Start Time={target_start_time}...")
    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    end_time = time.time() + max_wait_seconds

    while time.time() < end_time:
        rows = dump_peak_margin_grid(peak_margin_win)

        for r_idx, (row_cells, row_values) in enumerate(rows):
            if len(row_values) < 6:
                continue

            start_time_val = row_values[1]
            status_val = row_values[5]

            if start_time_val == target_start_time and status_val.upper() == "PENDING":
                logger.info(f"✅ Found row {r_idx}: Start={start_time_val}, Status={status_val}")

                # Step 1: Select checkbox
                checkbox_cell = row_cells[-1]
                checkbox_cell.click_input()
                logger.info("☑️ Checkbox selected.")
                time.sleep(1)

                # Step 2: Move mouse & double-click PENDING cell
                pending_cell = row_cells[5]
                rect = pending_cell.rectangle()
                center_x = rect.left + rect.width() // 2
                center_y = rect.top + rect.height() // 2
                logger.info(f"Moving mouse to PENDING cell at ({center_x}, {center_y})...")
                move(coords=(center_x, center_y))
                time.sleep(0.3)
                double_click(coords=(center_x, center_y))
                logger.info("🖱️ Double-clicked on PENDING cell.")
                time.sleep(0.5)

                # Extra check: Read current value again
                try:
                    new_val = pending_cell.legacy_properties().get("Value", "")
                    logger.info(f"After double-click, cell value still: {new_val}")
                except:
                    new_val = None

                # Step 3: Try to open dropdown (alt+down if needed)
                send_keys("%{DOWN}")  # Alt+Down
                time.sleep(0.3)

                # Step 4: Send REJECT
                send_keys("REJECT{ENTER}")
                logger.info("✅ Sent REJECT via keyboard.")
                time.sleep(0.5)

                # Step 5: Save
                safe_click(peak_margin_win, title="Save", control_type="Button")
                logger.info("💾 Clicked Save button.")
                time.sleep(1)

                # Step 6: Handle confirmation popup
                try:
                    popup = app.window(best_match="Risk Management System")
                    popup.wait("visible", timeout=5)
                    safe_click(popup, auto_id="2", control_type="Button")
                    logger.info("Clicked OK on confirmation popup.")
                except Exception:
                    logger.warning("No confirmation popup after save.")

                # ✅ Only return after successful REJECT + Save
                return  

        logger.debug("Row not matched yet, retrying...")
        time.sleep(poll_interval)

    raise RuntimeError(f"No row found with Start Time={target_start_time} & Status=PENDING within {max_wait_seconds}s")
