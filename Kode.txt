def handle_peak_margin(app, main_win):
    """Add a row in Peak Margin table, save it, return start_time used."""
    logger.info("Navigating to RMS Configuration -> Peak Margin via menu_select...")
    main_win.menu_select("RMS Configuration->Peak Margin")
    logger.info("Successfully opened Peak Margin window.")
    time.sleep(3)

    peak_margin_win = main_win.child_window(title="Peak Margin", control_type="Window")
    peak_margin_win.wait("visible", timeout=10)

    safe_click(peak_margin_win, title="Add", control_type="Button")
    time.sleep(3)

    # Re-fetch the table after clicking Add
    tables = peak_margin_win.descendants(control_type="Table") + peak_margin_win.descendants(control_type="List")
    if not tables:
        raise RuntimeError("No table/list controls found in Peak Margin window")
    grid = tables[0]

    all_cells = grid.descendants(control_type="DataItem")
    logger.info(f"Detected {len(all_cells)} data cells in table/list[0].")
    columns_per_row = 8
    rows = [all_cells[i:i + columns_per_row] for i in range(0, len(all_cells), columns_per_row)]

    # --- Dump table contents for debugging ---
    logger.info("=== Peak Margin Table Dump AFTER Add ===")
    for idx, row in enumerate(rows):
        row_texts = [c.window_text().strip() for c in row]
        logger.info(f"Row {idx:02d} ({len(row)} cells): {row_texts}")
    logger.info("=== End of Dump ===")

    # Find last row with >= 3 cells
    valid_rows = [r for r in rows if len(r) >= 3]
    if not valid_rows:
        raise RuntimeError("No valid rows with >=3 cells found after Add click")

    last_row_cells = valid_rows[-1]
    logger.info(f"Using last row index {len(valid_rows)-1}, has {len(last_row_cells)} cells.")

    # Calculate new start/end time
    last_end_time = None
    for r in valid_rows:
        row_texts = [c.window_text().strip() for c in r]
        if row_texts[2]:
            try:
                end_dt = datetime.strptime(row_texts[2], "%H:%M:%S")
                if not last_end_time or end_dt > last_end_time:
                    last_end_time = end_dt
            except ValueError:
                pass

    if last_end_time:
        new_start_dt = last_end_time + timedelta(minutes=1)
        logger.info(f"Last End Time = {last_end_time.strftime('%H:%M:%S')} â†’ New Start Time = {new_start_dt.strftime('%H:%M:%S')}")
    else:
        new_start_dt = datetime.strptime("17:00:00", "%H:%M:%S") + timedelta(minutes=random.randint(0, 59))

    new_end_dt = new_start_dt + timedelta(minutes=10)
    start_time = new_start_dt.strftime("%H:%M:%S")
    end_time = new_end_dt.strftime("%H:%M:%S")

    logger.info(f"Filling last row with Start={start_time}, End={end_time}")

    # --- Extra safety: check if row has cells before accessing ---
    if len(last_row_cells) < 3:
        raise RuntimeError(f"Last row has only {len(last_row_cells)} cells, cannot fill times!")

    set_cell_value(last_row_cells[1], start_time)
    set_cell_value(last_row_cells[2], end_time)

    safe_click(peak_margin_win, title="Save", control_type="Button")
    time.sleep(2)
    handle_data_sent_popup(app)

    logger.info("Row filled, saved, and popup confirmed successfully.")
    return start_time
