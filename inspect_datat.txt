---
- name: Upgrade Ubuntu 18.04 to 22.04 with private repository (no python3-apt dependency)
  hosts: all
  become: yes
  vars:
    reboot_wait_timeout: 1800  # 30 minutes
    script_execution_timeout: 14400  # 4 hours
    repo_url: "http://10.13.0.88:8080/ubuntu"

  tasks:
    # ==========================================================
    # PREP WORK - REMOVE i386 & REFRESH CACHE
    # ==========================================================
    - name: Remove i386 architecture (avoid 404 errors)
      ansible.builtin.raw: |
        dpkg --remove-architecture i386 || true
        apt-get update -y || true
      changed_when: false

    # ==========================================================
    # PHASE 1: 18.04 -> 20.04
    # ==========================================================
    - name: Add private repo for bionic manually
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/custom-bionic.list
        content: |
          deb [arch=amd64] {{ repo_url }} bionic main universe
          deb [arch=amd64] {{ repo_url }} bionic-updates main universe
          deb [arch=amd64] {{ repo_url }} bionic-security main universe
        mode: '0644'

    - name: Update apt cache for bionic
      ansible.builtin.shell: apt-get update -y
      register: apt_update_bionic
      changed_when: "'Reading package lists' in apt_update_bionic.stdout"

    - name: Remove lxd package (blocking upgrade sometimes)
      ansible.builtin.shell: apt-get remove --purge -y lxd || true

    - name: Copy auto-upgrade1.sh script for 18.04 to 20.04
      ansible.builtin.copy:
        dest: /tmp/auto-upgrade1.sh
        mode: '0755'
        content: |
          #!/bin/bash
          set -e
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -yq
          apt-get upgrade -yq
          apt-get dist-upgrade -yq
          apt-get autoremove -yq
          apt-get install -yq update-manager-core

    - name: Execute auto-upgrade1.sh
      ansible.builtin.shell: /tmp/auto-upgrade1.sh
      async: "{{ script_execution_timeout }}"
      poll: 10
      register: auto_upgrade1_result
      ignore_errors: yes

    - name: Reboot if required after first upgrade
      ansible.builtin.shell: test -f /var/run/reboot-required && reboot || true
      async: 1
      poll: 0
      ignore_errors: yes

    - name: Copy do-release1.sh script for 18.04 -> 20.04
      ansible.builtin.copy:
        dest: /tmp/do-release1.sh
        mode: '0755'
        content: |
          #!/bin/bash
          yes '' | sudo do-release-upgrade -f DistUpgradeViewNonInteractive
          apt-get autoremove -yq
          apt-get clean
          systemctl restart sshd

    - name: Execute do-release1.sh
      ansible.builtin.shell: /tmp/do-release1.sh
      async: "{{ script_execution_timeout }}"
      poll: 10
      register: do_release1_result
      ignore_errors: yes

    - name: Reboot if required after release upgrade
      ansible.builtin.shell: test -f /var/run/reboot-required && reboot || true
      async: 1
      poll: 0
      ignore_errors: yes

    # ==========================================================
    # PHASE 2: 20.04 -> 22.04
    # ==========================================================
    - name: Add private repo for focal manually
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/custom-focal.list
        content: |
          deb [arch=amd64] {{ repo_url }} focal main universe
          deb [arch=amd64] {{ repo_url }} focal-updates main universe
          deb [arch=amd64] {{ repo_url }} focal-security main universe
        mode: '0644'

    - name: Update apt cache for focal
      ansible.builtin.shell: apt-get update -y
      register: apt_update_focal
      changed_when: "'Reading package lists' in apt_update_focal.stdout"

    - name: Copy auto-upgrade2.sh script for 20.04 -> 22.04
      ansible.builtin.copy:
        dest: /tmp/auto-upgrade2.sh
        mode: '0755'
        content: |
          #!/bin/bash
          set -e
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -yq
          apt-get upgrade -yq
          apt-get dist-upgrade -yq
          apt-get autoremove -yq
          apt-get install -yq update-manager-core

    - name: Execute auto-upgrade2.sh
      ansible.builtin.shell: /tmp/auto-upgrade2.sh
      async: "{{ script_execution_timeout }}"
      poll: 10
      register: auto_upgrade2_result
      ignore_errors: yes

    - name: Reboot if required after auto-upgrade2.sh
      ansible.builtin.shell: test -f /var/run/reboot-required && reboot || true
      async: 1
      poll: 0
      ignore_errors: yes

    - name: Add private repo for jammy manually
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/custom-jammy.list
        content: |
          deb [arch=amd64] {{ repo_url }} jammy main universe
          deb [arch=amd64] {{ repo_url }} jammy-updates main universe
          deb [arch=amd64] {{ repo_url }} jammy-security main universe
        mode: '0644'

    - name: Update apt cache for jammy
      ansible.builtin.shell: apt-get update -y
      register: apt_update_jammy
      changed_when: "'Reading package lists' in apt_update_jammy.stdout"

    - name: Copy do-release2.sh script for 20.04 -> 22.04
      ansible.builtin.copy:
        dest: /tmp/do-release2.sh
        mode: '0755'
        content: |
          #!/bin/bash
          yes '' | sudo do-release-upgrade -f DistUpgradeViewNonInteractive
          apt-get autoremove -yq
          apt-get clean
          systemctl restart sshd

    - name: Execute do-release2.sh
      ansible.builtin.shell: /tmp/do-release2.sh
      async: "{{ script_execution_timeout }}"
      poll: 10
      register: do_release2_result
      ignore_errors: yes

    - name: Reboot if required after do-release2.sh
      ansible.builtin.shell: test -f /var/run/reboot-required && reboot || true
      async: 1
      poll: 0
      ignore_errors: yes

    # ==========================================================
    # FINAL CHECK
    # ==========================================================
    - name: Check OS release
      ansible.builtin.command: lsb_release -a
      register: os_release
      changed_when: false

    - name: Print OS release information
      ansible.builtin.debug:
        msg: "{{ os_release.stdout_lines }}"
